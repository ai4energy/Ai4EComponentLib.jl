var documenterSearchIndex = {"docs":
[{"location":"tutorials/ThermodynamicCycle/#ThermodynamicCycle-System","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"","category":"section"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"This page shows 5 examples of ThermodynamicCycle System.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"3 steps to use ThermodynamicCycle System:","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Define components\nConnect components\nSolve","category":"page"},{"location":"tutorials/ThermodynamicCycle/#Example-1:-Rankine-Cycle","page":"ThermodynamicCycle System","title":"Example 1: Rankine Cycle","text":"","category":"section"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"In this example, we define a variable x(t). It has nothing to do with the cycle. Actually, the meaning of this variable just allows the problem can be modeled by MTK and can be solved by DE. Becasue the cycle is kind of a sequential calculation, and it does not need to be solved. So add a x(t) to make it a differential equation problem.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: 图 2)  ","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Parameter of Rankine Cycle:","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Pump supply pressure : 3.0 MPa\nTemperature of Boiler outlet: 450 ℃\nCooling pressure in condenser: 4 kPa\nState of Water at pump inlet: Saturated water","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"tip: Tip\nIf States are Saturated(\"Q_0\" or \"Q_1\"), then ThermalStates has no need to be defined.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.ThermodynamicCycle\nusing DifferentialEquations, ModelingToolkit\nusing CoolProp\n\n@variables x(t)\n\n@named pump = IsentropicProcess(inter_state=\"P\")\n@named pump_P = ThermalStates(state=\"P\", value=3.0E6)\n\n@named boiler = IsobaricProcess(inter_state=\"T\")\n@named boiler_T = ThermalStates(state=\"T\", value=450.0 + 273.15)\n\n@named turbine = IsentropicProcess(inter_state=\"P\")\n@named turbine_P = ThermalStates(state=\"P\", value=4.0E3)\n\n@named condenser = IsothermalProcess(inter_state=\"Q_0\")\n\neqs = [\n  connect(pump.out, boiler.in, pump_P.node)\n  connect(boiler.out, turbine.in, boiler_T.node)\n  connect(turbine.out, condenser.in, turbine_P.node)\n  connect(condenser.out, pump.in)\n  ∂(x) ~ 0\n]\n\n@named model = ODESystem(eqs, t, systems=[pump, boiler, turbine, condenser, pump_P, boiler_T, turbine_P])\n\nsys = structural_simplify(model)\n\nprob = ODEProblem(sys, [0], (0, 0))\nsol = solve(prob)\n\nq1 = sol[boiler.Δh][1]\nw = -sol[turbine.Δh][1] - sol[pump.Δh][1]\nη = w / q1","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"And we can get the T-S diagram(tephigram) of the Rankine Cylce.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"plot_sys = [pump, boiler, turbine, condenser];\npropx = :s\npropy = :T\nss = [sol[getproperty(i.out, propx)][1] for i in plot_sys]\ntt = [sol[getproperty(i.out, propy)][1] for i in plot_sys]\nusing Plots\nres = collect(range(ss[1], ss[2], 100))\nplot(res, CoolProp.PropsSI.(\"T\", \"P\", 17.0E6, \"S\", res, \"Water\"), label=\"Boiler\", xlim=(0, 10000),ylabel=\"T\",xlabel=\"S\")\nplot!(collect(range(ss[2], ss[3], 100)), collect(range(tt[2], tt[3], 100)), label=\"Turbine\")\nres = collect(range(ss[3], ss[4], 100))\nplot!(res, CoolProp.PropsSI.(\"T\", \"P\", 5.0E3, \"S\", res, \"Water\"), label=\"Condenser\")\nplot!(collect(range(ss[4], ss[1], 100)), collect(range(tt[4], tt[1], 100)), label=\"Pump\")","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"The energy consumed by the pump is almost invisible from the diagram. Therefore, the work of the pump is often ignored when calculating the efficiency.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: fig)","category":"page"},{"location":"tutorials/ThermodynamicCycle/#Example-2:-States-change-over-time","page":"ThermodynamicCycle System","title":"Example 2: States change over time","text":"","category":"section"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"If we make one of detemined state(some of states are also supported. Just design as you want) change over time, the problem then becomes a true differential equation problem and we don't need x(t) any more.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"The meaning of this example is that calculate rankine cycle's thermal efficiency when the pressure in the boiler are [10.0,11.0,12.0,13.0,14.0,15.0,16.0,17.0,18.0,19.0,20.0]MPa","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Parameter of Rankine Cycle:","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Pump supply pressure : [10.0,...,20.0] MPa\nTemperature of Boiler outlet: 550 ℃\nCooling pressure in condenser: 5 kPa\nState of Water at pump inlet: Saturated water","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.ThermodynamicCycle\nusing DifferentialEquations, ModelingToolkit\nusing CoolProp\n\n@named pump = IsentropicProcess(inter_state=\"P\")\n@named pump_P = DThermalStates(state=\"P\", value=1.0E6, u0=10.0E6)\n\n@named boiler = IsobaricProcess(inter_state=\"T\")\n@named boiler_T = ThermalStates(state=\"T\", value=550.0 + 273.15)\n\n@named turbine = IsentropicProcess(inter_state=\"P\")\n@named turbine_P = ThermalStates(state=\"P\", value=5.0E3)\n\n@named condenser = IsothermalProcess(inter_state=\"Q_0\")\n\neqs = [\n  connect(pump.out, boiler.in, pump_P.node)\n  connect(boiler.out, turbine.in, boiler_T.node)\n  connect(turbine.out, condenser.in, turbine_P.node)\n  connect(condenser.out, pump.in)\n]\n\n\n@named model = ODESystem(eqs, t, systems=[pump, boiler, turbine, condenser, pump_P, boiler_T, turbine_P])\n\nsys = structural_simplify(model)\n\nprob = ODEProblem(sys, [], (0, 10), saveat=1)\nsol = solve(prob)\n\nq1 = sol[boiler.Δh]\nw = -sol[turbine.Δh] - sol[pump.Δh]\nη = w ./ q1\n","category":"page"},{"location":"tutorials/ThermodynamicCycle/#Example-3:-Reheat-Rankine-cycle","page":"ThermodynamicCycle System","title":"Example 3: Reheat Rankine cycle","text":"","category":"section"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"To be more efficient, consider reheat Rankine Cycle.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Parameter of Reheat Rankine Cycle:","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Pump supply pressure : [18.0,...,10.0] MPa\nTemperature of Boiler outlet: 550 ℃\nOutlet pressure of turbine first stage: 3.0 MPa\nTemperature of ReBoiler outlet: 450 ℃\nCooling pressure in condenser: 4 kPa\nState of Water at pump inlet: Saturated water","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: 图 3)  ","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.ThermodynamicCycle\nusing DifferentialEquations, ModelingToolkit\nusing CoolProp\n\n@named pump = IsentropicProcess(inter_state=\"P\")\n@named pump_P = DThermalStates(state=\"P\", value=-1.0E5, u0=18.0E6)\n\n@named boiler = IsobaricProcess(inter_state=\"T\")\n@named boiler_T = ThermalStates(state=\"T\", value=550+ 273.15)\n\n@named turbine = IsentropicProcess(inter_state=\"P\")\n@named turbine_P = ThermalStates(state=\"P\", value=3.0e6)\n\n@named reboiler = IsobaricProcess(inter_state=\"T\")\n@named reboiler_T = ThermalStates(state=\"T\", value=450 + 273.15)\n\n@named returbine = IsentropicProcess(inter_state=\"P\")\n@named returbine_P = ThermalStates(state=\"P\", value=4.0e3)\n\n@named condenser = IsothermalProcess(inter_state=\"Q_0\")\n\neqs = [\n  connect(pump.out, boiler.in, pump_P.node)\n  connect(boiler.out, turbine.in, boiler_T.node)\n  connect(turbine.out, reboiler.in, turbine_P.node)\n  connect(reboiler.out, returbine.in, reboiler_T.node)\n  connect(returbine.out, condenser.in, returbine_P.node)\n  connect(condenser.out, pump.in)\n]\n\n@named model = ODESystem(eqs, t, systems=[pump, boiler, turbine,\n  condenser, pump_P, boiler_T, turbine_P, reboiler,\n  reboiler_T, returbine, returbine_P])\n\nsys = structural_simplify(model)\n\nprob = ODEProblem(sys, [], (0, 10), saveat=1)\nsol = solve(prob)\n\nq1 = sol[boiler.Δh] .+ sol[reboiler.Δh]\nw = -sol[turbine.Δh] - sol[returbine.Δh] - sol[pump.Δh]\nη = w ./ q1\n","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"And T-S diagram.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"plot_sys = [pump, boiler, turbine, reboiler, returbine, condenser];\npropx = :s\npropy = :T\n\nss = [sol[getproperty(i.out, propx)][1] for i in plot_sys]\ntt = [sol[getproperty(i.out, propy)][1] for i in plot_sys]\n\nusing Plots\nres = collect(range(ss[1], ss[2], 100))\nplot(res, CoolProp.PropsSI.(\"T\", \"P\", 6.69E6, \"S\", res, \"Water\"), label=\"Boiler\", xlim=(0, 10000), ylabel=\"T\", xlabel=\"S\")\nplot!(collect(range(ss[2], ss[3], 100)), collect(range(tt[2], tt[3], 100)), label=\"Turbine\")\nres = collect(range(ss[3], ss[4], 100))\nplot!(res, CoolProp.PropsSI.(\"T\", \"P\", 0.782e6, \"S\", res, \"Water\"), label=\"reBoiler\")\nplot!(collect(range(ss[4], ss[5], 100)), collect(range(tt[4], tt[5], 100)), label=\"reTurbine\")\nplot!(collect(range(ss[5], ss[6], 100)), collect(range(tt[5], tt[6], 100)), label=\"Condenser\")\nplot!(collect(range(ss[6], ss[1], 100)), collect(range(tt[6], tt[1], 100)), label=\"Pump\")\n","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: 图 7)  ","category":"page"},{"location":"tutorials/ThermodynamicCycle/#Example-4:-A-Rankine-cycle-System","page":"ThermodynamicCycle System","title":"Example 4: A Rankine cycle System","text":"","category":"section"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Combined with Example1 and Example3. Suppose Boiler1 and Boiler2 have the same steam output. What is the efficiency?","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: 图 4)","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"In fact, it can be regarded as the average of two separate Rankine cycle and reheat Rankine cycle.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(0.45644849499826373 + 0.37492352067537854)/2","category":"page"},{"location":"tutorials/ThermodynamicCycle/#Example-5:-Brayton-cycle-in-Gas-Turbine","page":"ThermodynamicCycle System","title":"Example 5: Brayton cycle in Gas Turbine","text":"","category":"section"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"The method of modeling is the same.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: 图 5)  ","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Parameter of Brayton cycle:","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Pressure at compressor outlet: 1.212 MPa\nTemperature at compressor inlet: 310 K\nTemperature at combustion chamber outlet: 1573 K\nPressure at gas turbine outlet: 101 kPa","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.ThermodynamicCycle\nusing DifferentialEquations, ModelingToolkit\nusing CoolProp\n\n@variables x(t)\n\nsystem = []\n@named compressor = IsentropicProcess(inter_state=\"P\", fluid=\"Air\")\n@named compressor_P = ThermalStates(state=\"P\", value=0.101e6 * 12)\npush!(system, compressor, compressor_P)\n\n@named combustion_chamber = IsobaricProcess(inter_state=\"T\", fluid=\"Air\")\n@named combustion_chamber_T = ThermalStates(state=\"T\", value=1573)\npush!(system, combustion_chamber, combustion_chamber_T)\n\n@named gas_turbine = IsentropicProcess(inter_state=\"P\", fluid=\"Air\")\n@named gas_turbine_P = ThermalStates(state=\"P\", value=0.101e6)\npush!(system, gas_turbine, gas_turbine_P)\n\n@named cooling = IsobaricProcess(inter_state=\"T\", fluid=\"Air\")\n@named cooling_T = ThermalStates(state=\"T\", value=310)\n# @named cooling_P = ThermalStates(state=\"P\", value=0.101e6)\npush!(system, cooling, cooling_T)\n\neqs = [\n  connect(compressor.out, combustion_chamber.in, compressor_P.node)\n  connect(combustion_chamber.out, gas_turbine.in, combustion_chamber_T.node)\n  connect(gas_turbine.out, cooling.in, gas_turbine_P.node)\n  connect(cooling.out, compressor.in, cooling_T.node)\n  ∂(x) ~ 0\n]\n\n@named model = ODESystem(eqs, t, systems=system)\n\nsys = structural_simplify(model)\n\nprob = ODEProblem(sys, [0], (0, 0))\nsol = solve(prob)\n\nq1 = sol[combustion_chamber.Δh][1]\nw = -sol[gas_turbine.Δh][1] - sol[compressor.Δh][1]\nη = w / q1","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Brayton cycle T-S diagram:","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"plot_sys = [compressor, combustion_chamber, gas_turbine, cooling];\npropx = :s\npropy = :T\n\nss = [sol[getproperty(i.out, propx)][1] for i in plot_sys]\ntt = [sol[getproperty(i.out, propy)][1] for i in plot_sys]\nxs = Float64[]\nys = Float64[]\nusing Plots\n\nres = collect(range(ss[1], ss[2], 100))\nplot(res, CoolProp.PropsSI.(\"T\", \"P\", 0.101e6 * 12, \"S\", res, \"Air\"), label=\"combustion_chamber\", xlim=(3500, 6000),ylabel=\"T\",xlabel=\"S\")\nplot!(collect(range(ss[2], ss[3], 100)), collect(range(tt[2], tt[3], 100)), label=\"gas_turbine\")\nres = collect(range(ss[3], ss[4], 100))\nplot!(res, CoolProp.PropsSI.(\"T\", \"P\", 0.101e6, \"S\", res, \"Air\"), label=\"cooling\")\nplot!(collect(range(ss[4], ss[1], 100)), collect(range(tt[4], tt[1], 100)), label=\"compressor\")\n","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: 图 8)  ","category":"page"},{"location":"tutorials/ThermodynamicCycle/#Example-6:-ArbitraryProcess-Example","page":"ThermodynamicCycle System","title":"Example 6: ArbitraryProcess Example","text":"","category":"section"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"With parameters in example 5, we treat process in gas turbine a ArbitraryProcess. And suppose all thermal energy is converted into kinetic energy by gas turbine without loss.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Temperature at gas turbine outlet: 770 K\nPressure at gas turbine outlet: 101 kPa","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"using Ai4EComponentLib.ThermodynamicCycle\nusing DifferentialEquations, ModelingToolkit\nusing CoolProp\n\n@variables x(t)\n\nsystem = []\n@named compressor = IsentropicProcess(inter_state=\"P\", fluid=\"Air\")\n@named compressor_P = ThermalStates(state=\"P\", value=0.101e6 * 12)\npush!(system, compressor, compressor_P)\n\n@named combustion_chamber = IsobaricProcess(inter_state=\"T\", fluid=\"Air\")\n@named combustion_chamber_T = ThermalStates(state=\"T\", value=1573)\npush!(system, combustion_chamber, combustion_chamber_T)\n\n@named gas_turbine = ArbitraryProcess(inter_state=\"P\", fluid=\"Air\")\n@named gas_turbine_P = ThermalStates(state=\"P\", value=0.101e6)\n@named gas_turbine_T = ThermalStates(state=\"T\", value=770)\npush!(system, gas_turbine, gas_turbine_P, gas_turbine_T)\n\n@named cooling = IsobaricProcess(inter_state=\"T\", fluid=\"Air\")\n@named cooling_T = ThermalStates(state=\"T\", value=310)\npush!(system, cooling, cooling_T)\n\neqs = [\n  connect(compressor.out, combustion_chamber.in, compressor_P.node)\n  connect(combustion_chamber.out, gas_turbine.in, combustion_chamber_T.node)\n  connect(gas_turbine.out, cooling.in, gas_turbine_P.node, gas_turbine_T.node)\n  connect(cooling.out, compressor.in, cooling_T.node)\n  ∂(x) ~ 0\n]\n\n@named model = ODESystem(eqs, t, systems=system)\n\nsys = structural_simplify(model)\n\nprob = ODEProblem(sys, [0], (0, 0))\nsol = solve(prob)\n\nq1 = sol[combustion_chamber.Δh][1]\nw = -sol[gas_turbine.Δh][1] - sol[compressor.Δh][1]\nη = w / q1","category":"page"},{"location":"tutorials/ThermodynamicCycle/#Example-7:-Ideal-refrigeration-cycle","page":"ThermodynamicCycle System","title":"Example 7:  Ideal refrigeration cycle","text":"","category":"section"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"In this example, the modeling method is the same as the examples above.It should be mentioned that the working medium used in this ideal refrigeration cycle is R134a.","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: 图9)","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Parameters of Ideal Refrigeration Cycle:","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Pressure of compressor outlet : 1016.3kPa\nState of R134a at condenser outlet: Saturated liquid\nPressure of throttle outlet : 83.896kPa\nState of R134a at evaporator outlet: Saturated vapor","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"using ModelingToolkit, DifferentialEquations\nusing Ai4EComponentLib\nusing Ai4EComponentLib.ThermodynamicCycle\nusing CoolProp\n\nsystem = []\n@named compressor = IsentropicProcess(inter_state=\"P\", fluid=\"R134a\")\n@named compressor_P = ThermalStates(state=\"P\", value=1.0163e6)\npush!(system, compressor, compressor_P)\n\n@named condenser = IsobaricProcess(inter_state=\"Q_0\", fluid=\"R134a\")\npush!(system, condenser)\n\n@named throttle = IsoenthalpyProcess(inter_state=\"P\", fluid=\"R134a\")\n@named throttle_P = ThermalStates(state=\"P\", value=8.3896e4)\npush!(system, throttle, throttle_P)\n\n@named evaporator = IsobaricProcess(inter_state=\"Q_1\", fluid=\"R134a\")\npush!(system, evaporator)\n\neqs = [\n    connect(compressor.out, condenser.in, compressor_P.node)\n    connect(condenser.out, throttle.in)\n    connect(throttle.out, evaporator.in, throttle_P.node)\n    connect(evaporator.out, compressor.in)\n]\n\n@named model = ODESystem(eqs, t, systems=system)\n\nsys = structural_simplify(model)\n\nprob = ODAEProblem(sys, [], (0, 0))\nsol = solve(prob)\n\nw = sol[compressor.Δh][1]\nql = sol[evaporator.Δh][1]\nε = ql / w","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"Ideal refrigeration cycle T-S diagram:","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"plot_sys = [compressor, condenser, throttle, evaporator];\npropx = :s\npropy = :T\n\nss = [sol[getproperty(i.out, propx)][1] for i in plot_sys]\ntt = [sol[getproperty(i.out, propy)][1] for i in plot_sys]\n\nusing Plots\nres = collect(range(ss[1], ss[2], 100))\nplot(res, CoolProp.PropsSI.(\"T\", \"P\", 1.0163e6, \"S\", res, \"R134a\"), label=\"condenser\", xlim=(1000,2200), ylabel=\"T\", xlabel=\"S\")\nplot!(collect(range(ss[2], ss[3], 100)), collect(range(tt[2], tt[3], 100)), label=\"throttle\")\nres = collect(range(ss[3], ss[4], 100))\nplot!(res, CoolProp.PropsSI.(\"T\", \"P\",8.3896e4, \"S\", res, \"R134a\"), label=\"evaporator\")\nplot!(collect(range(ss[4], ss[1], 100)), collect(range(tt[4], tt[1], 100)), label=\"compressor\")","category":"page"},{"location":"tutorials/ThermodynamicCycle/","page":"ThermodynamicCycle System","title":"ThermodynamicCycle System","text":"(Image: 图10)","category":"page"},{"location":"API/IncompressiblePipe/#IncompressiblePipeAPI","page":"IncompressiblePipeAPI","title":"IncompressiblePipeAPI","text":"","category":"section"},{"location":"API/IncompressiblePipe/","page":"IncompressiblePipeAPI","title":"IncompressiblePipeAPI","text":"CurrentModule = Ai4EComponentLib.IncompressiblePipe","category":"page"},{"location":"API/IncompressiblePipe/","page":"IncompressiblePipeAPI","title":"IncompressiblePipeAPI","text":"Pages = [\"IncompressiblePipe.md\"]","category":"page"},{"location":"API/IncompressiblePipe/#Index","page":"IncompressiblePipeAPI","title":"Index","text":"","category":"section"},{"location":"API/IncompressiblePipe/","page":"IncompressiblePipeAPI","title":"IncompressiblePipeAPI","text":"Pages = [\"IncompressiblePipe.md\"]","category":"page"},{"location":"API/IncompressiblePipe/#IncompressiblePipe-Components","page":"IncompressiblePipeAPI","title":"IncompressiblePipe Components","text":"","category":"section"},{"location":"API/IncompressiblePipe/","page":"IncompressiblePipeAPI","title":"IncompressiblePipeAPI","text":"Modules = [IncompressiblePipe]","category":"page"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe.CentrifugalPump-Tuple{}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe.CentrifugalPump","text":"CentrifugalPump(; name, D, ω, c_0, c_1, ρ)\n\n\nComponent: CentrifugalPump\n\nIdeal H-Q Characteristic curves of Centrifugal Pumps:\n\nH_t=frac(romega)^2g-fracomega cotbeta 2pi bgQ=c_0omega^2-c_1omega Q=a_0-a_1Q\n\nParameters:\n\nD: [m] Diameter of pipe\nω: [r/min] rotary speed\nc_0: parameter in H-Q Characteristic curves\nc_1: parameter in H-Q Characteristic curves\n\nConnectors:\n\nin: Inlet of pump\nout: Outlet of pump\n\n\n\n\n\n","category":"method"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe.ElbowPipe-Tuple{}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe.ElbowPipe","text":"ElbowPipe(; name, D, K, ρ, zin, zout)\n\n\nComponent: ElbowPipe(pipe with fixed local resistance loss coefficient f)\n\nEnergy conservation equation in the form of Bernoulli Equation between two ports:\n\nfracp_inrho g +frac8q_in^2pi^2D^4g + z_in=\nfracp_outrho g +frac8q_out^2pi^2D^4g + z_out+h_f+h_m\n\nParameters:\n\nD: [m] Diameter of pipe\nK: Local resistance loss coefficient\n\nConnectors:\n\nin: Inlet of pipe\nout: Outlet of pipe\n\nArguments:\n\nzin: [m] The height of inlet port\nzout: [m] The height of outlet port\nρ: [`m³/kg] The density of fluid passing the port\n\n\n\n\n\n","category":"method"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe.PipeNode-Tuple{}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe.PipeNode","text":"PipeNode(; name, z)\n\n\nA pipe port(inlet or outlet) in an pipe network.\n\nStates:\n\np(t): [Pa] The pressure at this port\nq(t): [m³/s] The volume flow passing through this port\n\nParameters:\n\nz: [m] The hight of port, expressing potential energy\n\n\n\n\n\n","category":"method"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe.SimplePipe-Tuple{}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe.SimplePipe","text":"SimplePipe(; name, L, D, f, ρ, zin, zout, K_inside)\n\n\nComponent: SimplePipe(pipe with fixed friction factor f)\n\nEnergy conservation equation in the form of Bernoulli Equation between two ports:\n\nfracp_inrho g +frac8q_in^2pi^2D^4g + z_in=\nfracp_outrho g +frac8q_out^2pi^2D^4g + z_out+h_f+h_m\n\nParameters:\n\nD: [m] Diameter of pipe\nL: [m] Length of pipe\nf: Friction factor\nK_inside: Coefficient of local resistance loss inside the pipe\n\nConnectors:\n\nin: Inlet of pipe\nout: Outlet of pipe\n\nArguments:\n\nzin: [m] The height of inlet port\nzout: [m] The height of outlet port\nρ: [`m³/kg] The density of fluid passing the port\n\n\n\n\n\n","category":"method"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe.Sink_P-Tuple{}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe.Sink_P","text":"Sink_P(; name, p)\n\n\nComponent: Sink_P\n\nSink_P can be defined as a source(where fluids are from) or sink(where fluid are going to).\n\nConnectors:\n\nport: port of sink\n\nArguments:\n\np: [Pa] The pressure of sink, default: 101325 (standard atmospheric pressure)\n\n\n\n\n\n","category":"method"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe.Source_P-Tuple{}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe.Source_P","text":"Source_P(; name, D, z, ρ, p, K_inlet)\n\n\nComponent: Source_P(source with inlet pressure losses)\n\nParameters:\n\nD: [m] Diameter of pipe\nK_inlet: Local resistance loss coefficient of Inlet port, default: 0.5\n\nConnectors:\n\nport: port of source\n\nArguments:\n\nz: [m] The height of source\nρ: [m³/kg] The density of fluid\np: [Pa] The pressure of source, default: 101325 (standard atmospheric pressure)\n\n\n\n\n\n","category":"method"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe._NodeEnergy-Tuple{Any, Any, Any}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe._NodeEnergy","text":"_NodeEnergy(node, D, ρ) -> Any\n\n\nTo get the energy at the port.\n\nThe governing equation of incompressible pipe network is Bernoulli Equation: \n\nfracprho g +fracv^22g + z=mathrmconstant\n\nIn volume flow form:\n\nfracprho g +frac8q^2pi^2D^4g + z=mathrmconstant\n\nD: [m] Diameter of pipe\nρ: [`m³/kg] The density of fluid passing the port\n\n\n\n\n\n","category":"method"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe._h_f-NTuple{4, Any}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe._h_f","text":"_h_f(node, f, L, D) -> Any\n\n\nTo get the loss of resistance along the pipe(between two ports).\n\nIn volume flow form:\n\nh_f = ffracLD frac8q^2pi^2D^4g\n\n\n\n\n\n","category":"method"},{"location":"API/IncompressiblePipe/#Ai4EComponentLib.IncompressiblePipe._h_m-Tuple{Any, Any, Any}","page":"IncompressiblePipeAPI","title":"Ai4EComponentLib.IncompressiblePipe._h_m","text":"_h_m(node, K, D) -> Any\n\n\nTo get the local resistance loss the components.\n\nIn volume flow form:\n\nh_m = K frac8q^2pi^2D^4g\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#CompressedAirSystemAPI","page":"CompressedAirSystemAPI","title":"CompressedAirSystemAPI","text":"","category":"section"},{"location":"API/CompressedAirSystem/","page":"CompressedAirSystemAPI","title":"CompressedAirSystemAPI","text":"CurrentModule = Ai4EComponentLib.CompressedAirSystem","category":"page"},{"location":"API/CompressedAirSystem/","page":"CompressedAirSystemAPI","title":"CompressedAirSystemAPI","text":"Pages = [\"CompressedAirSystem.md\"]","category":"page"},{"location":"API/CompressedAirSystem/#Index","page":"CompressedAirSystemAPI","title":"Index","text":"","category":"section"},{"location":"API/CompressedAirSystem/","page":"CompressedAirSystemAPI","title":"CompressedAirSystemAPI","text":"Pages = [\"CompressedAirSystem.md\"]","category":"page"},{"location":"API/CompressedAirSystem/#CompressedAirSystem-Components","page":"CompressedAirSystemAPI","title":"CompressedAirSystem Components","text":"","category":"section"},{"location":"API/CompressedAirSystem/","page":"CompressedAirSystemAPI","title":"CompressedAirSystemAPI","text":"Modules = [CompressedAirSystem]","category":"page"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.AirStroageTank-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.AirStroageTank","text":"AirStroageTank(; name, V, T, p0)\n\n\nAir tank.\n\nValve with constant resistance.\n\nArguments:\n\nV: [m³] Volume, defaults: 20\nT: [K] Temperature, defaults: 300\np0: [Pa] Initial pressure, defaults: 1e5\n\nConnectors:\n\ninlet inlet of components\noutlet outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.ConstantValve-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.ConstantValve","text":"ConstantValve(; name, R)\n\n\nValve with constant resistance.\n\nConnectors:\n\ninlet inlet of components\noutlet outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.FlowPort-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.FlowPort","text":"FlowPort(; name)\n\n\nPort(inlet or outlet) in CompressedAirSystem.\n\nStates:\n\np(t): [Pa] The pressure at this port\nqm(t): [kg/s] The mass flow rate passing through this port\nT(t): [K] The mass flow rate passing through this port\nρ(t): [kg/m³] The density passing at this port\nμ(t): [Pa⋅s] The absolute viscosity at this port\nqv(t): [m³/s] The volume  flow rate passing through this port\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.Purifier-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.Purifier","text":"Purifier(; name, c, Δp, T)\n\n\nGeneral purifier.\n\nArguments:\n\nc: Purification coefficient, percentage of residual mass flow after purification to inlet mass flow, defaults: 1.0\nΔp: [Pa] Absolute pressure drop across the component\nT: [K] Outlet temperature after cooling\n\nConnectors:\n\ninlet inlet of components\noutlet outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.SISOComponent-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.SISOComponent","text":"SISOComponent(; name)\n\n\nThe Component with two ports inlet and outlet and mass flow qm flows from inlet to outlet. It plays the same role as Oneport in the circuit system.\n\nStates:\n\nqm(t): [kg/s] The mass flow rate passing through this component\nΔp(t): [Pa] The pressure difference at a component\nρ_mean(t): [kg/m³] The density at a component\nμ_mean(t): [Pa⋅s] The absolute viscosity at a component\nqv_mean(t): [m³/s] The volume flow rate passing through this component\n\nConnectors:\n\ninlet inlet of components\noutlet outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.SimplifiedPipe-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.SimplifiedPipe","text":"SimplifiedPipe(; name, R0)\n\n\nSimplified pipe model\n\nArguments:\n\nR0: [kg/m^7] Resistance coefficient of pipeline\n\nConnectors:\n\ninlet inlet of components\noutlet outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.Source-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.Source","text":"Source(; name, boundary)\n\n\nSource is a general source, which can generate pressure boundary(\"p\"), temperature boundary(\"T\") or mass flow boundary(\"qm\") with different input parameters.\n\nValve with constant resistance.\n\nArguments:\n\nboundary: Dict with boundaries\n\nConnectors:\n\nsource: port of source\n\ninletBoundary = Dict(\n    \"p\" => 1.0e5(1 + 0.001sin(t)),\n    \"T\" => 300,\n)\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.StraightPipe-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.StraightPipe","text":"StraightPipe(; name, D, L, ϵ)\n\n\nStraight round pipe and height difference is not considered. Friction coefficient is obtained from Modi diagram.\n\nArguments:\n\nD: [m] Pipe diameter, defaults: 1.0\nL: [m] Pipe length, defaults: 1.0\nϵ: [m] Absolute roughness of pipeline, defaults: 0.05\n\nConnectors:\n\ninlet inlet of components\noutlet outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.TransitionPipe-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.TransitionPipe","text":"TransitionPipe(; name, n, f, D, L, T, p0, qm0)\n\n\nSimplified pipe model\n\nArguments:\n\nf: [kg/m⁷] Resistance coefficient of pipeline\nn: Number of pipe discrete node\nD: [m] Pipe diameter, defaults: 1.0\nL: [m] Pipe length, defaults: 1.0\nT: [K] Ambient temperature, defaults: 300\np0: [Pa] Initial pressure of each node\nqm0: [kg/(m²⋅s)] Initial specific momentum of each node\n\nConnectors:\n\ninlet inlet of components\noutlet outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.VarySpeedCompressor-Tuple{}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.VarySpeedCompressor","text":"VarySpeedCompressor(\n;\n    name,\n    n0,\n    h_polCoff,\n    etaCoff,\n    surgeCoff,\n    chokeCoff\n)\n\n\nVariable speed compressor.\n\nh_polCoff = a1 * inletqv^2 + a2 * inletqv * n  n0 + a3 * (n  n0)^3) * g\n\netaCoff = b1 * inletqv^2 * (n0  n)^2 + b2 * inletqv * n0  n + b3\n\nsurgeCoff = (c1 * n * n + c2 * n + c3)  3600\n\nchokeCoff = (d1 * n * n + d2 * n + d3)  3600\n\nStates:\n\nqm(t): [kg/s] The mass flow rate\nn(t): [rpm] speed\nϵ(t): pressure ratio\nh_pol(t): [J] Energy head\nh_tot(t): [J] Total Work\neta_pol(t): Surge limit coefficient\nqv_surge(t): [kg/s] Surge flow rate\nqv_choke(t): [kg/s] choke flow rate\nσ(t)\n\nArguments:\n\nn0: [rpm] Rated speed\nh_polCoff: Work coefficient\netaCoff: Efficiency coefficient\nsurgeCoff: Surge limit coefficient\nchokeCoff: Choke limit coefficient\n\nConnectors:\n\ninlet inlet of components\noutlet outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.pipeFriction_turbulent-NTuple{4, Any}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.pipeFriction_turbulent","text":"pipeFriction_turbulent(f, Re, ϵ, D) -> Any\n\n\nFitting Formula for Friction Coefficient of Turbulent Pipe\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.pipeRe-NTuple{4, Any}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.pipeRe","text":"pipeRe(ρ, u, D, μ) -> Any\n\n\nReynolds number\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.pipeVelocity-NTuple{5, Any}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.pipeVelocity","text":"pipeVelocity(Δp, ρ, L, D, f) -> Any\n\n\nFlow rate in pipe\n\n\n\n\n\n","category":"method"},{"location":"API/CompressedAirSystem/#Ai4EComponentLib.CompressedAirSystem.stateEquation-Tuple{Any, Any, Any}","page":"CompressedAirSystemAPI","title":"Ai4EComponentLib.CompressedAirSystem.stateEquation","text":"stateEquation(p, ρ, T) -> Any\n\n\nState Equation of Dry Air\n\n\n\n\n\n","category":"method"},{"location":"tutorials/CompressedAirSystem/#CompressenAirSystem","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"","category":"section"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"3 steps to use CompressenAirSystem System:","category":"page"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"Define components\nConnect components\nSolve","category":"page"},{"location":"tutorials/CompressedAirSystem/#Example-1:-A-Integrated-System","page":"CompressenAirSystem","title":"Example 1: A Integrated System","text":"","category":"section"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"The system contains 4 types of components.","category":"page"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"Compressor\nPurifier\nPipe\nAirtank","category":"page"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"(Image: figure1)","category":"page"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.CompressedAirSystem\nusing ModelingToolkit, DifferentialEquations\n\nn0 = 4000\nh_polCoff = [-91.7802, 1058.2670, 3213.1520]\netaCoff = [-0.0181, 0.2880, -0.2557]\nsurgeCoff = [-2.950e-7, 4.8009, -5.1678]\nchokeCoff = [1.1054e-6, 8.6274, 20.7626]\n\nf=0.05                  # Friction resistance coefficient\nn = 15                  # Number of nodes\nD = 0.4                 # Pipe diameter\nL = 20                  # length\nR = 3000                # Resistance coefficient\nT = 300                 # Temperature\nqm0 = 10 * ones(n)      # Initial mass flow rate\np0 = 10e5 * ones(n)     # initial pressure\n\nn2 = 40                 # Number of nodes\nD2 = 0.4                # Pipe diameter\nL2 = 200                # length\nR2 = 3000               # Resistance coefficient\nT2 = 300                # Temperature\nqm02 = 10 * ones(n2)    # Initial mass flow rate\np02 = range(10e5,8e5,length=n2)  #initial pressure\n\ninletBoundary = Dict(\n    \"p\" => 1.0e5,\n    \"T\" => 300,\n)\n\noutletBoundary = Dict(\n    \"T\" => 300,\n    \"p\" => 4e5,\n)\n\n@named cp11 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp21 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp31 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp41 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp12 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp22 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp32 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp42 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp13 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp23 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp33 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named cp43 = VarySpeedCompressor(\n    n0=n0,\n    h_polCoff=h_polCoff,\n    etaCoff=etaCoff,\n    surgeCoff=surgeCoff,\n    chokeCoff=chokeCoff\n)\n\n@named purifier11=Purifier(c=1,Δp=300,T=330)\n@named purifier21=Purifier(c=1,Δp=400,T=330)\n@named purifier31=Purifier(c=1,Δp=200,T=330)\n@named purifier41=Purifier(c=1,Δp=600,T=330)\n\n@named purifier12=Purifier(c=1,Δp=300,T=330)\n@named purifier22=Purifier(c=1,Δp=400,T=330)\n@named purifier32=Purifier(c=1,Δp=200,T=330)\n@named purifier42=Purifier(c=1,Δp=600,T=330)\n\n@named purifier13=Purifier(c=0.99,Δp=300,T=300)\n@named purifier23=Purifier(c=0.98,Δp=400,T=300)\n@named purifier33=Purifier(c=0.995,Δp=200,T=300)\n@named purifier43=Purifier(c=0.97,Δp=600,T=300)\n\n@named transPipe11 = TransitionPipe(n=n, D=D, L=L, T=T, p0=p0, qm0=qm0, f=f)\n@named transPipe12 = TransitionPipe(n=n, D=D, L=L, T=T, p0=p0, qm0=qm0, f=f)\n@named transPipe13 = TransitionPipe(n=n, D=D, L=L, T=T, p0=p0, qm0=qm0, f=f)\n@named transPipe14 = TransitionPipe(n=n, D=D, L=L, T=T, p0=p0, qm0=qm0, f=f)\n\n@named airTank=AirStroageTank(V=40,p0=8e5)\n\n@named transPipe21 = TransitionPipe(n=n2, D=D2, L=L2, T=T2, p0=p02, qm0=qm02, f=f)\n@named transPipe22 = TransitionPipe(n=n2, D=D2*2, L=L2, T=T2, p0=p02, qm0=qm02, f=f)\n\n@named inletSource = Source(boundary=inletBoundary)\n@named outletSource = Source(boundary=outletBoundary)\n\naddEq1 = [\n    connect(cp11.inlet,cp21.inlet,cp31.inlet,cp41.inlet,inletSource.source)\n    connect(cp11.outlet,purifier11.inlet)\n    connect(cp21.outlet,purifier21.inlet)\n    connect(cp31.outlet,purifier31.inlet)\n    connect(cp41.outlet,purifier41.inlet)\n\n    connect(cp12.inlet,purifier11.outlet)\n    connect(cp22.inlet,purifier21.outlet)\n    connect(cp32.inlet,purifier31.outlet)\n    connect(cp42.inlet,purifier41.outlet)\n\n    connect(cp12.outlet,purifier12.inlet)\n    connect(cp22.outlet,purifier22.inlet)\n    connect(cp32.outlet,purifier32.inlet)\n    connect(cp42.outlet,purifier42.inlet)\n\n    connect(purifier12.outlet,cp13.inlet)\n    connect(purifier22.outlet,cp23.inlet)\n    connect(purifier32.outlet,cp33.inlet)\n    connect(purifier42.outlet,cp43.inlet)\n\n    connect(cp13.outlet,purifier13.inlet)\n    connect(cp23.outlet,purifier23.inlet)\n    connect(cp33.outlet,purifier33.inlet)\n    connect(cp43.outlet,purifier43.inlet)\n\n    connect(transPipe11.inlet,purifier13.outlet)\n    connect(transPipe12.inlet,purifier23.outlet)\n    connect(transPipe13.inlet,purifier33.outlet)\n    connect(transPipe14.inlet,purifier43.outlet)\n\n    connect(transPipe11.outlet,transPipe12.outlet,transPipe13.outlet,transPipe14.outlet,airTank.inlet)\n\n    connect(transPipe21.inlet, transPipe22.inlet, airTank.outlet)\n\n    connect(transPipe21.outlet,transPipe22.outlet,outletSource.source)\n\n    cp11.n~4000\n    cp21.n~3980\n    cp31.n~4020\n    cp41.n~4000\n    cp12.n~4300\n    cp22.n~4280\n    cp32.n~4320\n    cp42.n~4300\n    cp13.n~4800\n    cp23.n~4780\n    cp33.n~4820\n    cp43.n~4800\n]\n\n@named addEq1_model = ODESystem(addEq1, t)\n@named cp_model = compose(addEq1_model,\n cp11, cp21, cp31 ,cp41,cp12, cp22, cp32 ,cp42,cp13, cp23, cp33 ,cp43,\n purifier11, purifier21,purifier31,purifier41,\n purifier12, purifier22,purifier32,purifier42,\n purifier13, purifier23,purifier33,purifier43,\n transPipe11,transPipe12,transPipe13,transPipe14, \n transPipe21,transPipe22, \n airTank, \n inletSource, outletSource\n)\n\nsys1 = structural_simplify(cp_model)\n\nprob1 = ODEProblem(sys1, [], (0, 3))\nsol1 = solve(prob1, Rodas4())\nsol1[airTank.p]","category":"page"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"Then we can generate the pressure diagram of airTank.","category":"page"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"using Plots\nplot(sol1.t, sol1[airTank.p])\nsavefig(\"example_cas.svg\"); nothing # hide","category":"page"},{"location":"tutorials/CompressedAirSystem/","page":"CompressenAirSystem","title":"CompressenAirSystem","text":"(Image: 图3_3)","category":"page"},{"location":"tutorials/Electrochemistry/#Electrochemistry-System","page":"Electrochemistry System","title":"Electrochemistry System","text":"","category":"section"},{"location":"tutorials/Electrochemistry/#PhotovoltaicCell","page":"Electrochemistry System","title":"PhotovoltaicCell","text":"","category":"section"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"To use PhotovoltaicCell(), we design a resistor called vari_Resistor whose resistance value changes with time. Then we can see the I-U curve of PhotovoltaicCell with different loads.","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"Equivalent circuit diagram of PhotovoltaicCell():","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_ 1)  ","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"using Ai4EComponentLib\nusing ModelingToolkit, DifferentialEquations\nusing Ai4EComponentLib.Electrochemistry\nusing Plots\n\nfunction vari_Resistor(; name)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    eqs = [\n        v ~ i * t\n    ]\n    extend(ODESystem(eqs, t, [], []; name=name), oneport)\nend\n\n@named Pv = PhotovoltaicCell()\n@named R = vari_Resistor()\n@named ground = Ground()\n\neqs = [\n    connect(Pv.p, R.p)\n    connect(Pv.n, R.n, ground.g)\n]\n\n@named OdeFun = ODESystem(eqs, t)\n@named model = compose(OdeFun, [Pv, R, ground])\nsys = structural_simplify(model)\nprob = ODEProblem(sys, [], (0.0, 300.0))\nsol = solve(prob)","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"plot(sol[R.p.v], sol[R.p.i], color = \"red\")\nsavefig(\"example_1.svg\"); nothing # hide","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_一)","category":"page"},{"location":"tutorials/Electrochemistry/#PEMElectrolyzer","page":"Electrochemistry System","title":"PEMElectrolyzer","text":"","category":"section"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"Using above PhotovoltaicCell to drive Electrolyzer, then we build a PVEL system. In default paraments, we can know how the system works.","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"Equivalent circuit diagram of PEMElectrolyzer():","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_ 2)  ","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"using ModelingToolkit, DifferentialEquations\nusing Ai4EComponentLib\nusing Ai4EComponentLib.Electrochemistry\n\n@named Pv = PhotovoltaicCell()\n@named El = PEMElectrolyzer()\n@named ground = Ground()\neqs = [\n    connect(Pv.p, El.p)\n    connect(Pv.n, El.n, ground.g)\n]\n@named OdeFun = ODESystem(eqs, t)\n@named model = compose(OdeFun, [Pv, El, ground])\nsys = structural_simplify(model)\nu0 = [\n    El.m_H_2 => 0.0\n    El.∂_m_H_2 => 0.0\n]\nprob = ODEProblem(sys, u0, (0.0, 30.0))\nsol = solve(prob)","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"Get states of system by states()","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"states(sys)","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"Check voltage, current and mass yield of electrolyzer. The working point (El.v,El.i) can be found in I-U curve above.","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"sol[El.v]","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"sol[El.i]","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"sol[El.m_H_2]","category":"page"},{"location":"tutorials/Electrochemistry/#Lithium-battery","page":"Electrochemistry System","title":"Lithium battery","text":"","category":"section"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"Equivalent circuit diagram of Lithium_ion_batteries():","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_ 3)  ","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"using ModelingToolkit, DifferentialEquations\nusing Ai4EComponentLib\nusing Ai4EComponentLib.Electrochemistry\nusing Plots\n\n@named batter = Lithium_ion_batteries()\n@named Pv = PhotovoltaicCell()\n@named ground = Ground()\n\neqs = [\n    connect(batter.p, Pv.p)\n    connect(batter.n, Pv.n, ground.g)\n]\n\n@named OdeFun = ODESystem(eqs, t)\n@named model = compose(OdeFun, [Pv, batter, ground])\nsys = structural_simplify(model)\nu0 = [\n    batter.v_f => 0.5\n    batter.v_s => 0.5\n    batter.v_soc => 0.5\n]\nprob = ODEProblem(sys, u0, (0.0, 3600.0))\nsol = solve(prob)","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"plot(sol.t, sol[batter.v_soc], color = \"red\")\nsavefig(\"example_3_1.svg\"); nothing # hide","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_3_1)","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"plot(sol.t, sol[batter.v_s], color = \"red\")\nsavefig(\"example_3_2.svg\"); nothing # hide","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_3_2)","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"plot(sol.t, sol[batter.i_b], color = \"red\")\nsavefig(\"example_3_3.svg\"); nothing # hide","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_3_3)","category":"page"},{"location":"tutorials/Electrochemistry/#Super-capacity","page":"Electrochemistry System","title":"Super capacity","text":"","category":"section"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"Equivalent circuit diagram of Super_capacity():","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_ 4)  ","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"using Ai4EComponentLib\nusing ModelingToolkit, DifferentialEquations\nusing Ai4EComponentLib.Electrochemistry\nusing Plots\n\nfunction charge_controller(; name)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    eqs = [∂(i) ~ 0]\n    events = [\n        [t ~ 5.0] => [i ~ -10],\n        [t ~ 36.7] => [i ~ 0],\n    ]\n    return extend(ODESystem(eqs, t, [], []; name=name, continuous_events=events), oneport)\nend\n\n@named ground = Ground()\n@named sc = Super_capacity()\n@named cg = charge_controller()\neqs = [\n    connect(sc.p, cg.p)\n    connect(sc.n, cg.n, ground.g)\n]\n\n@named OdeFun = ODESystem(eqs, t)\n@named model = compose(OdeFun, [sc, cg, ground])\nsys = structural_simplify(model)\nu0 = [\n    sc.v_0 => 0.0\n    sc.v_2 => 0.0\n    cg.i   => 0.0\n]\n\nprob = ODEProblem(sys, u0, (0.0, 600))\nsol = solve(prob)","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_4_1)  ","category":"page"},{"location":"tutorials/Electrochemistry/#MPPT-Controller","page":"Electrochemistry System","title":"MPPT Controller","text":"","category":"section"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"The MPPT controller can detect the generating voltage of the solar panel in real time, and track the maximum voltage current value (VI), so that the system can charge the battery at the maximum power output.","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_ 1)  ","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"using Ai4EComponentLib.Electrochemistry, Ai4EComponentLib\nusing ModelingToolkit\nusing IfElse: ifelse\nusing DifferentialEquations\nusing Plots\n\nglobal power = zeros(1000).+50.0\nglobal solar = [0.134588889,0.307388889,0.494766667,0.666464444,0.760082222,0.773202222,0.765344444,0.543993333,0.422606667,0.2673,0.1105,0.053308889,0.000384444,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.01498,0.080171111,0.229308889,0.443246667,0.607068889,0.645895556,0.729895556,0.585984444,0.644491111,0.52154,0.397646667,0.217877778,0.065024444,0.000295556,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.007548889,0.05546,0.101291111,0.19226,0.245717778,0.25434,0.275068889,0.342962222,0.288295556,0.274233333,0.172188889,0.068171111,0.027637778,0.000153333,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.019975556,0.160011111,0.312562222,0.412064444,0.493433333,0.62746,0.560811111,0.616402222,0.399442222,0.351353333,0.251548889,0.183904444,0.053468889,0.000135556,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.020437778,0.170197778,0.377557778,0.576135556,0.737717778,0.846126667,0.891886667,0.845575556,0.770962222,0.6393,0.419655556,0.241753333,0.062162222,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.01978,0.167122222,0.375406667,0.573095556,0.725095556,0.830268889,0.863833333,0.864508889,0.7793,0.63978,0.460828889,0.242908889,0.058891111,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.016508889,0.154144444,0.335015556,0.515406667,0.680544444,0.812686667,0.773504444,0.694108889,0.686997778,0.491673333,0.294624444,0.141362222,0.032402222,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.007655556,0.036668889,0.06202,0.120775556,0.115442222,0.200153333,0.171886667,0.25466,0.177664444,0.195122222,0.099797778,0.106251111,0.030731111,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.012331111,0.112331111,0.262731111,0.437095556,0.582464444,0.663815556,0.758891111,0.700508889,0.691726667,0.544348889,0.353682222,0.192864444,0.036331111,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.013397778,0.126748889,0.257344444,0.441486667,0.54266,0.632188889,0.610606667,0.552491111,0.517166667,0.453771111,0.362126667,0.187708889,0.038535556,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.011957778,0.117557778,0.292455556,0.445077778,0.562073333,0.675122222,0.757131111,0.739317778,0.588811111,0.551922222,0.379726667,0.185895556,0.037735556,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.013148889,0.124224444,0.30362,0.512171111,0.625877778,0.753255556,0.735104444,0.7321,0.617948889,0.54698,0.36842,0.173326667,0.038286667,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.012864444,0.13434,0.327051111,0.517237778,0.635335556,0.761148889,0.777415556,0.671975556,0.677948889,0.542766667,0.333771111,0.159993333,0.031033333,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.010464444,0.106002222,0.27114,0.356668889,0.509753333,0.567246667,0.599673333,0.512313333,0.336668889,0.281682222,0.209931111,0.13466,0.023264444,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.004171111,0.064811111,0.121522222,0.275264444,0.359513333,0.421184444,0.464828889,0.604953333,0.480224444,0.347797778,0.268597778,0.12666,0.026962222,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.009735556,0.099548889,0.248828889,0.333877778,0.583993333,0.662553333,0.617913333,0.497451111,0.507051111,0.359708889,0.150997778,0.057895556,0.012064444,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.002357778,0.017077778,0.04026,0.042446667,0.129077778,0.165504444,0.12458,0.122553333,0.077397778,0.083157778,0.090748889,0.097842222,0.013006667,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.004526667,0.049504444,0.142624444,0.152046667,0.283975556,0.347175556,0.317771111,0.363477778,0.210731111,0.139406667,0.097788889,0.049113333,0.012722222,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.001237778,0.017611111,0.044295556,0.083068889,0.102677778,0.226037778,0.177646667,0.12474,0.084633333,0.038624444,0.030908889,0.011477778,0.00186,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.00186,0.012775556,0.026766667,0.04106,0.056633333,0.119655556,0.070535556,0.08314,0.082304444,0.106108889,0.087762222,0.044046667,0.010482222,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.003762222,0.059673333,0.1721,0.355851111,0.40506,0.321611111,0.373077778,0.33098,0.256437778,0.221237778,0.216562222,0.098606667,0.016366667,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.007868889,0.116117778,0.303708889,0.515228889,0.660917778,0.749913333,0.751228889,0.744988889,0.637308889,0.521095556,0.339868889,0.15722,0.019726667,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.007602222,0.1281,0.338997778,0.508206667,0.643957778,0.766091111,0.820597778,0.791193333,0.459815556,0.257077778,0.246553333,0.109948889,0.011424444,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.004562222,0.078162222,0.159228889,0.236704444,0.391264444,0.434411111,0.546037778,0.540082222,0.3593,0.187477778,0.12842,0.064793333,0.006997778,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.006571111,0.116811111,0.310713333,0.493593333,0.656171111,0.754766667,0.752544444,0.681113333,0.670091111,0.501788889,0.298322222,0.130393333,0.013077778,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.006162222,0.119424444,0.311566667,0.502428889,0.66266,0.768508889,0.815068889,0.778624444,0.689024444,0.493895556,0.246411111,0.116526667,0.011068889,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.00266,0.03706,0.108971111,0.188526667,0.223495556,0.190997778,0.323353333,0.290482222,0.395246667,0.346091111,0.259904444,0.12906,0.009895556,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.00554,0.120437778,0.318677778,0.513415556,0.67194,0.766713333,0.804028889,0.774642222,0.677291111,0.528793333,0.339673333,0.140597778,0.010873333,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.005148889,0.117042222,0.31034,0.505148889,0.660775556,0.762411111,0.798553333,0.764757778,0.667673333,0.517735556,0.324828889,0.1201,0.008242222,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.003655556,0.06618,0.154855556,0.24106,0.305486667,0.30154,0.374962222,0.400295556,0.461522222,0.370464444,0.205433333,0.079904444,0.005344444,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.002215556]\nsolar = solar .* 1000 \n@named pv_input = Secrete(solar,output_type = \"min\")\n@named power_input = Secrete(power,output_type = \"min\")\n@named pv = PhotovoltaicCell_secrete()\n@named mppt = MPPT_Controller(Sampling_time = 0.5)\n@named batter = Lithium_ion_batteries()\n@named load = electronic_load()\n@named dc_pv = DC2DC(value = 36, output_type = \"voltage\")\n@named dc_batter = DC2DC(value = 36, output_type = \"none\")\n@named ground = Ground()\n\neqs = [\n    connect(pv_input.u, pv.u)\n    connect(power_input.u, load.u)\n    connect(pv.p, mppt.in.p)\n    connect(pv.n, mppt.in.n)\n    connect(mppt.out.p, dc_pv.in.p)\n    connect(mppt.out.n, dc_pv.in.n)\n    connect(dc_pv.out.p, dc_batter.out.p)\n    connect(dc_pv.out.n, dc_batter.out.n)\n    connect(dc_batter.in.p, batter.p)\n    connect(dc_batter.in.n, batter.n)\n    connect(dc_batter.out.p, load.p)\n    connect(dc_batter.out.n, load.n)\n    connect(pv.n, ground.g)\n    connect(dc_pv.in.n, ground.g)\n    connect(batter.n, ground.g)\n    connect(dc_batter.out.n, ground.g)\n    ]\n@named OdeFun = ODESystem(eqs, t)\n@named model = compose(OdeFun, [batter, ground, pv_input, power_input, pv, mppt, dc_pv, dc_batter, load])\nsys = structural_simplify(model)\nu0 = [\nbatter.v_s => 0.1,\nbatter.v_f => 0.1,\nbatter.v_soc => 0.3\n    ]\nprob = ODEProblem(sys, u0, (0.0,5000.0))\nsol = solve(prob,Rosenbrock23())\n","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"plot(sol.t, sol[batter.v_soc])\nsavefig(\"example_mppt_v_soc.svg\"); nothing # hide","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_mppt1)","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"plot(sol.t, sol[mppt.p_new])\nsavefig(\"example_mppt_pnew.svg\"); nothing # hide","category":"page"},{"location":"tutorials/Electrochemistry/","page":"Electrochemistry System","title":"Electrochemistry System","text":"(Image: fig_mppt2)","category":"page"},{"location":"tutorials/IncompressiblePipe/#IncompressiblePipe-System","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"","category":"section"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"This page shows 5 examples of IncompressiblePipe System. By default, fluid passing pipes is water.","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"Examples finsh 3 steps:","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"Define components from IncompressiblePipe\nConnect components\nSolve","category":"page"},{"location":"tutorials/IncompressiblePipe/#Example-1","page":"IncompressiblePipe System","title":"Example 1","text":"","category":"section"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"The height of Pipe1's inlet port is 25m. Actually, this is a trick that makes potential energy of source added to  Pipe1's inlet port. Because the height is a parameter in system instead of a variable so that it can't be passed on between components.","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"(Image: 图 1)","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.IncompressiblePipe\nusing DifferentialEquations, ModelingToolkit, Test\n\n@named high = Source_P(D=0.15, z=25.0)\n@named low = Sink_P()\n@named elbow1 = ElbowPipe(K=0.9, D=0.15)\n@named elbow2 = ElbowPipe(K=0.9, D=0.15, zin=15.0, zout=15.0)\n@named pipe1 = SimplePipe(L=30.0, D=0.15, f=0.023, zin=25.0, zout=0.0)\n@named pipe2 = SimplePipe(L=15.0, D=0.15, f=0.023, zin=0.0, zout=15.0)\n@named pipe3 = SimplePipe(L=60.0, D=0.15, f=0.023, K_inside=10.8, zin=15.0, zout=15.0)\n\neqs = [\n    connect(high.port, pipe1.in)\n    connect(pipe1.out, elbow1.in)\n    connect(elbow1.out, pipe2.in)\n    connect(pipe2.out, elbow2.in)\n    connect(elbow2.out, pipe3.in)\n    connect(pipe3.out, low.port)\n]\n\n@named model = compose(ODESystem(eqs, t, name=:funs), [high, low, pipe1, pipe2, pipe3, elbow1, elbow2])\n\nsys = structural_simplify(model)\n\nprob = ODEProblem(sys, [], (0.0, 0.0))\n\nsol = solve(prob)\n\nsol[pipe1.in.q]","category":"page"},{"location":"tutorials/IncompressiblePipe/#Example-2","page":"IncompressiblePipe System","title":"Example 2","text":"","category":"section"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"(Image: 图 1)","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.IncompressiblePipe\nusing DifferentialEquations, ModelingToolkit, Test\n\n@named high = Source_P(D=1.0, z=100.0, K_inlet=0.0)\n@named low1 = Sink_P()\n@named low2 = Sink_P()\n@named pipe1 = SimplePipe(L=1000.0, D=1.0, f=0.02, zin=100.0, zout=10.0)\n@named pipe2 = SimplePipe(L=500.0, D=1.0, f=0.02, zin=10.0, zout=20.0)\n@named pipe3 = SimplePipe(L=400.0, D=1.0, f=0.02, zin=10.0, zout=0.0)\n\neqs = [\n    connect(high.port, pipe1.in)\n    connect(pipe1.out, pipe3.in, pipe2.in)\n    connect(pipe2.out, low1.port)\n    connect(pipe3.out, low2.port)\n]\n \n@named model = compose(ODESystem(eqs, t, name=:funs), [high, low1, low2, pipe1, pipe2, pipe3])\n\nsys = structural_simplify(model)\n\nprob = ODEProblem(sys, [], (0.0, 0.0))\n\nsol = solve(prob)\n\nres = Dict()\nfor i in [pipe1,pipe2,pipe3]\n  global res[string(i.name) * \" inlet flow:\"] = sol[i.in.q][1]\nend\nres","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"In this example, the height of Pipe1's outlet port will not change the result. Let's try 15m.","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"@named high = Source_P(D=1.0, z=100.0, K_inlet=0.0)\n@named low1 = Sink_P()\n@named low2 = Sink_P()\n@named pipe1 = SimplePipe(L=1000.0, D=1.0, f=0.02, zin=100.0, zout=15.0)\n@named pipe2 = SimplePipe(L=500.0, D=1.0, f=0.02, zin=15.0, zout=20.0)\n@named pipe3 = SimplePipe(L=400.0, D=1.0, f=0.02, zin=15.0, zout=0.0)\n\neqs = [\n    connect(high.port, pipe1.in)\n    connect(pipe1.out, pipe3.in, pipe2.in)\n    connect(pipe2.out, low1.port)\n    connect(pipe3.out, low2.port)\n]\n \n@named model = compose(ODESystem(eqs, t, name=:funs), [high, low1, low2, pipe1, pipe2, pipe3])\n\nsys = structural_simplify(model)\n\nprob = ODEProblem(sys, [], (0.0, 0.0))\n\nsol = solve(prob)\n\nres = Dict()\nfor i in [pipe1,pipe2,pipe3]\n  global res[string(i.name) * \" inlet flow:\"] = sol[i.in.q][1]\nend\nres","category":"page"},{"location":"tutorials/IncompressiblePipe/#Example-3","page":"IncompressiblePipe System","title":"Example 3","text":"","category":"section"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"Components in Example 3 ~ Example 5 are puted on the same horizontal level.","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"(Image: 图 1)","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.IncompressiblePipe\nusing DifferentialEquations, ModelingToolkit, Test\n\nsystem = []\n\n@named pumpA = CentrifugalPump();\npush!(system, pumpA);\n@named pumpB = CentrifugalPump();\npush!(system, pumpB);\n@named pumpC = CentrifugalPump();\npush!(system, pumpC);\n\n@named pipe1 = SimplePipe(L=1.0);\npush!(system, pipe1);\n@named pipe2 = SimplePipe(L=10.0);\npush!(system, pipe2);\n@named pipe3 = SimplePipe(L=1.0);\npush!(system, pipe3);\n@named pipe4 = SimplePipe(L=10.0);\npush!(system, pipe4);\n@named pipe5 = SimplePipe(L=5.0);\npush!(system, pipe5);\n@named pipe6 = SimplePipe(L=1.0);\npush!(system, pipe6);\n@named pipe7 = SimplePipe(L=5.0);\npush!(system, pipe7);\n@named pipe8 = SimplePipe(L=1.0);\npush!(system, pipe8);\n@named pipe9 = SimplePipe(L=10.0);\npush!(system, pipe9);\n@named pipe10 = SimplePipe(L=1.0);\npush!(system, pipe10);\n\n@named sink1 = Sink_P(p=1.0E5);\npush!(system, sink1);\n@named sink2 = Sink_P(p=1.0E5);\npush!(system, sink2);\n@named sink3 = Sink_P(p=1.0E5);\npush!(system, sink3);\n@named sink4 = Sink_P(p=1.0E5);\npush!(system, sink4);\n@named sink5 = Sink_P(p=1.0E5);\npush!(system, sink5);\n\n\n\neqs = [\n  connect(sink3.port, pumpA.in)\n  connect(pumpA.out, pipe1.in)\n  connect(pipe1.out, pipe2.in, pipe4.in)\n  connect(pipe2.out, pipe3.out, pipe5.in)\n  connect(sink4.port, pumpB.in)\n  connect(pumpB.out, pipe3.in)\n  connect(pipe5.out, pipe6.in, pipe7.in)\n  connect(pipe6.out, sink1.port)\n  connect(pipe4.out, pipe9.out, pipe8.in)\n  connect(pipe7.out, pipe10.out, pipe9.in)\n  connect(sink5.port, pumpC.in)\n  connect(pipe10.in, pumpC.out)\n  connect(pipe8.out, sink2.port)\n]\n\n@named model = compose(ODESystem(eqs, t, name=:funs), system)\nsys = structural_simplify(model)\nprob = ODEProblem(sys, [], (0, 0.0))\nsol = solve(prob)\n\nres = Dict()\nfor i in system[4:end-5]\n  global res[string(i.name) * \" inlet flow:\"] = sol[i.in.q][1]\nend\nres","category":"page"},{"location":"tutorials/IncompressiblePipe/#Example-4","page":"IncompressiblePipe System","title":"Example 4","text":"","category":"section"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"In this example, value of inlet flow is a negative number which means the flow direction and arrow are in opposite direction.","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"(Image: 图 4)","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.IncompressiblePipe\nusing DifferentialEquations, ModelingToolkit, Test\n\nsystem = []\n@named pumpA = CentrifugalPump();\npush!(system, pumpA);\n@named pumpB = CentrifugalPump();\npush!(system, pumpB);\n\n@named pipe1 = SimplePipe(L=1.0);\npush!(system, pipe1);\n@named pipe2 = SimplePipe(L=2.0);\npush!(system, pipe2);\n@named pipe3 = SimplePipe(L=2.0);\npush!(system, pipe3);\n@named pipe4 = SimplePipe(L=4.0);\npush!(system, pipe4);\n@named pipe5 = SimplePipe(L=2.0);\npush!(system, pipe5);\n@named pipe6 = SimplePipe(L=2.0);\npush!(system, pipe6);\n@named pipe7 = SimplePipe(L=2.0);\npush!(system, pipe7);\n@named pipe8 = SimplePipe(L=1.0);\npush!(system, pipe8);\n@named pipe9 = SimplePipe(L=6.0);\npush!(system, pipe9);\n@named pipe10 = SimplePipe(L=2.0);\npush!(system, pipe10);\n@named pipe11 = SimplePipe(L=1.0);\npush!(system, pipe11);\n\n@named sink0 = Sink_P();\npush!(system, sink0);\n@named sink1 = Sink_P();\npush!(system, sink1);\n@named sink2 = Sink_P();\npush!(system, sink2);\n\neqs = [\n  connect(sink0.port, pumpA.in)\n  connect(pumpA.out, pipe1.in)\n  connect(pipe1.out, pipe2.in, pipe3.in, pipe4.in)\n  connect(pipe2.out, pumpB.in)\n  connect(pumpB.out, pipe9.in)\n  connect(pipe3.out, pipe5.in, pipe6.in)\n  connect(pipe6.out, pipe4.out, pipe7.in)\n  connect(pipe7.out, pipe10.out, pipe11.in)\n  connect(pipe11.out, sink2.port)\n  connect(pipe9.out, pipe5.out, pipe10.in, pipe8.in)\n  connect(pipe8.out, sink1.port)\n]\n\n@named model = compose(ODESystem(eqs, t, name=:funs), system)\nsys = structural_simplify(model)\nprob = ODEProblem(sys, [], (0, 0.0))\nsol = solve(prob)\n\nres = Dict()\nfor i in system[3:end-3]\n  global res[string(i.name) * \" inlet flow:\"] = sol[i.in.q][1]\nend\nres","category":"page"},{"location":"tutorials/IncompressiblePipe/#Example-5","page":"IncompressiblePipe System","title":"Example 5","text":"","category":"section"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"(Image: 图 5)  ","category":"page"},{"location":"tutorials/IncompressiblePipe/","page":"IncompressiblePipe System","title":"IncompressiblePipe System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.IncompressiblePipe\nusing DifferentialEquations, ModelingToolkit, Test\n\n@named Pump = CentrifugalPump(ω=5000)\n@named A = Sink_P()\n@named B = Sink_P()\n\nsystem = [A, B, Pump]\n\n@named Pipe1 = SimplePipe(L=2.0);\npush!(system, Pipe1);\n@named Pipe2 = SimplePipe(L=3.0);\npush!(system, Pipe2);\n@named Pipe3 = SimplePipe(L=7.0);\npush!(system, Pipe3);\n@named Pipe4 = SimplePipe(L=9.0);\npush!(system, Pipe4);\n@named Pipe5 = SimplePipe(L=5.0);\npush!(system, Pipe5);\n@named Pipe6 = SimplePipe(L=4.0);\npush!(system, Pipe6);\n@named Pipe7 = SimplePipe(L=5.0);\npush!(system, Pipe7);\n@named Pipe8 = SimplePipe(L=1.0);\npush!(system, Pipe8);\n@named Pipe9 = SimplePipe(L=10.0);\npush!(system, Pipe9);\n@named Pipe10 = SimplePipe(L=2.0);\npush!(system, Pipe10);\n@named Pipe11 = SimplePipe(L=2.0);\npush!(system, Pipe11);\n@named Pipe12 = SimplePipe(L=3.0);\npush!(system, Pipe12);\n@named Pipe13 = SimplePipe(L=12.0);\npush!(system, Pipe13);\n@named Pipe14 = SimplePipe(L=1.0);\npush!(system, Pipe14);\n@named Pipe15 = SimplePipe(L=2.0);\npush!(system, Pipe15);\n@named Pipe16 = SimplePipe(L=3.0);\npush!(system, Pipe16);\n@named Pipe17 = SimplePipe(L=6.0);\npush!(system, Pipe17);\n@named Pipe18 = SimplePipe(L=6.0);\npush!(system, Pipe18);\n@named Pipe19 = SimplePipe(L=6.0);\npush!(system, Pipe19);\n@named Pipe20 = SimplePipe(L=1.0);\npush!(system, Pipe20);\n@named Pipe21 = SimplePipe(L=1.0);\npush!(system, Pipe21);\n@named Pipe22 = SimplePipe(L=7.0);\npush!(system, Pipe22);\n@named Pipe23 = SimplePipe(L=3.0);\npush!(system, Pipe23);\n@named Pipe24 = SimplePipe(L=3.0);\npush!(system, Pipe24);\n@named Pipe25 = SimplePipe(L=2.0);\npush!(system, Pipe25);\n\neqs = [\n  connect(A.port, Pump.in)\n  connect(Pump.out, Pipe1.in)\n  connect(Pipe1.out, Pipe2.in, Pipe5.in)\n  connect(Pipe2.out, Pipe3.in, Pipe6.in)\n  connect(Pipe3.out, Pipe4.in, Pipe7.in)\n  connect(Pipe4.out, Pipe10.out, Pipe14.in)\n  connect(Pipe5.out, Pipe11.in, Pipe12.in)\n  connect(Pipe6.out, Pipe8.in, Pipe9.in)\n  connect(Pipe7.out, Pipe9.out, Pipe10.in)\n  connect(Pipe12.out, Pipe8.out, Pipe13.in)\n  connect(Pipe13.out, Pipe14.out, Pipe15.in)\n  connect(Pipe11.out, Pipe19.in, Pipe16.in)\n  connect(Pipe16.out, Pipe17.in, Pipe20.in)\n  connect(Pipe17.out, Pipe18.in, Pipe21.in)\n  connect(Pipe18.out, Pipe15.out, Pipe22.in)  \n  connect(Pipe19.out, Pipe20.out, Pipe23.in)  \n  connect(Pipe21.out, Pipe22.out, Pipe24.in)  \n  connect(Pipe23.out, Pipe24.out, Pipe25.in)  \n  connect(B.port, Pipe25.out)\n]\n\n\n@named model = compose(ODESystem(eqs, t, name=:funs), system)\nsys = structural_simplify(model)\nprob = ODEProblem(sys, [], (0, 0.0))\nsol = solve(prob)\n\nres = Dict()\nfor i in system[4:end]\n  global res[string(i.name) * \" inlet flow:\"] = sol[i.in.q][1]\nend\nres","category":"page"},{"location":"tutorials/AirPipeSim/#AirPipeSim","page":"AirPipeSim","title":"AirPipeSim","text":"","category":"section"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"This page shows 2 examples of AirPipeSim.","category":"page"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"3 steps to use AirPipeSim System:","category":"page"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"Define components\nConnect components\nSolve","category":"page"},{"location":"tutorials/AirPipeSim/#Example-1:-A-basic-test-for-components","page":"AirPipeSim","title":"Example 1: A basic test for components","text":"","category":"section"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"(Image: Fig 1.1)","category":"page"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"This test has 6 components:","category":"page"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"Pressure Source, inlet of system\nAirSimplePipe, it's actually a stable component not only stand for pipes but also valves and elbows and their ccombinations.\nTransition Pipe. There are two transition pipes, one in front of air storage tank and another behind it.\nAir Storage Tank.\nFlow Sink, outlet of system.","category":"page"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"# Define components\nusing Ai4EComponentLib\nusing Ai4EComponentLib.AirPipeSim\nusing ModelingToolkit, DifferentialEquations\n\n@named inlet = PressureSource(p=6e5, T=300)\n@named pipe1 = AirSimplePipe(R=100, T=300)\n@named pipe2 = TransitionPipe(n=20, f=0.016, D=0.2, L=100, T=300, pins=5.6e5, pouts=4e5)\n@named airTank = AirStorageTank(V=20, T=300, p0=4e5)\n@named pipe3 = TransitionPipe(n=20, f=0.016, D=0.2, L=100, T=300, pins=4e5, pouts=2e5)\n@named outlet = FlowSource(qm=-3.0, T=300)\n\n# Connect components\neqs=[\n    connect(inlet.port,pipe1.inlet)\n    connect(pipe1.outlet,pipe2.inlet)\n    connect(pipe2.outlet,airTank.inlet)\n    connect(airTank.outlet,pipe3.inlet)\n    connect(pipe3.outlet,outlet.port)\n]\n\n@named connects=ODESystem(eqs,t)\n@named model=compose(connects,inlet,pipe1,pipe2,pipe3,airTank,outlet)\n\n# Simplify the system and solve\nsys=structural_simplify(model)\n\nprob=ODAEProblem(sys,[],(0.0,5.0))\n\nsol=solve(prob,Rosenbrock23())","category":"page"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"We can find the variation of mass flow rate at the inlet and outlet of this system, and the pressure in air storage tank.","category":"page"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"(Image: Fig 1.2)","category":"page"},{"location":"tutorials/AirPipeSim/","page":"AirPipeSim","title":"AirPipeSim","text":"(Image: Fig 1.3)","category":"page"},{"location":"API/ThermodynamicCycle/#ThermodynamicCycleAPI","page":"ThermodynamicCycleAPI","title":"ThermodynamicCycleAPI","text":"","category":"section"},{"location":"API/ThermodynamicCycle/","page":"ThermodynamicCycleAPI","title":"ThermodynamicCycleAPI","text":"CurrentModule = Ai4EComponentLib.ThermodynamicCycle","category":"page"},{"location":"API/ThermodynamicCycle/","page":"ThermodynamicCycleAPI","title":"ThermodynamicCycleAPI","text":"Pages = [\"ThermodynamicCycle.md\"]","category":"page"},{"location":"API/ThermodynamicCycle/#Index","page":"ThermodynamicCycleAPI","title":"Index","text":"","category":"section"},{"location":"API/ThermodynamicCycle/","page":"ThermodynamicCycleAPI","title":"ThermodynamicCycleAPI","text":"Pages = [\"ThermodynamicCycle.md\"]","category":"page"},{"location":"API/ThermodynamicCycle/#ThermodynamicCycle-Components","page":"ThermodynamicCycleAPI","title":"ThermodynamicCycle Components","text":"","category":"section"},{"location":"API/ThermodynamicCycle/","page":"ThermodynamicCycleAPI","title":"ThermodynamicCycleAPI","text":"Modules = [ThermodynamicCycle]","category":"page"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.ArbitraryProcess-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.ArbitraryProcess","text":"ArbitraryProcess(; name, inter_state, process, fluid)\n\n\nComponent: ArbitraryProcess\n\nOnce the two states in a node are determined, the remaining 3 states can be obtained from these two known states.  In ArbitraryProcess, 2 states need to be determined. \n\nConnectors:\n\nin: Inlet of process\nout: Outlet of process\n\nArguments:\n\ninter_state: One state to be determined. There are 7 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\n\"Q_0\": Giving saturated liquid(0 is value of the state, automatically passed into ODESystem)\n\"Q_1\": Giving saturated vapor(1 is value of the state, automatically passed into ODESystem)\nprocess: Another state to be determined. There are 5 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\nfluid: The fluid passing throught the component, default: \"Water\"\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.DThermalStates-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.DThermalStates","text":"DThermalStates(; name, state, value, u0)\n\n\nComponent: DThermalStates\n\nThe DThermalStates make the value of state changes over time. \n\nfracpartial Statepartial t = ConstantValue\n\nConnectors:\n\nnode: A node passing value\n\nArguments:\n\nstate: State that determined in process. There are 5 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\nvalue: The value of ConstantValue in above formula:\nu0: The initial value of the state\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.IsentropicProcess-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.IsentropicProcess","text":"IsentropicProcess(; name, inter_state, fluid)\n\n\nComponent: IsentropicProcess\n\nThe Entropy is constant during the process. \n\nOnce the two states in a node are determined, the remaining 3 states can be obtained from these two known states. In IsentropicProcess, entropy are the same from inlet to outlet. So another state still needed. \n\nConnectors:\n\nin: Inlet of process\nout: Outlet of process\n\nArguments:\n\ninter_state: Another state need to be determined. There are 7 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\n\"Q_0\": Giving saturated liquid(0 is value of the state, automatically passed into ODESystem)\n\"Q_1\": Giving saturated vapor(1 is value of the state, automatically passed into ODESystem)\nfluid: The fluid passing throught the component, default: \"Water\"\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.IsobaricProcess-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.IsobaricProcess","text":"IsobaricProcess(; name, inter_state, fluid)\n\n\nComponent: IsobaricProcess\n\nThe Pressure is constant during the process. \n\nOnce the two states in a node are determined, the remaining 3 states can be obtained from these two known states. In IsobaricProcess, pressure are the same from inlet to outlet. So another state still needed. \n\nConnectors:\n\nin: Inlet of process\nout: Outlet of process\n\nArguments:\n\ninter_state: Another state need to be determined. There are 7 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\n\"Q_0\": Giving saturated liquid(0 is value of the state, automatically passed into ODESystem)\n\"Q_1\": Giving saturated vapor(1 is value of the state, automatically passed into ODESystem)\nfluid: The fluid passing throught the component, default: \"Water\"\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.IsochoricProcess-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.IsochoricProcess","text":"IsochoricProcess(; name, inter_state, fluid)\n\n\nComponent: IsochoricProcess\n\nThe Density is constant during the process. \n\nOnce the two states in a node are determined, the remaining 3 states can be obtained from these two known states. In IsochoricProcess, density are the same from inlet to outlet. So another state still needed. \n\nConnectors:\n\nin: Inlet of process\nout: Outlet of process\n\nArguments:\n\ninter_state: Another state need to be determined. There are 7 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\n\"Q_0\": Giving saturated liquid(0 is value of the state, automatically passed into ODESystem)\n\"Q_1\": Giving saturated vapor(1 is value of the state, automatically passed into ODESystem)\nfluid: The fluid passing throught the component, default: \"Water\"\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.IsoenthalpyProcess-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.IsoenthalpyProcess","text":"IsoenthalpyProcess(; name, inter_state, fluid)\n\n\nComponent: IsoenthalpyProcess\n\nThe Enthalpy is constant during the process. \n\nOnce the two states in a node are determined, the remaining 3 states can be obtained from these two known states. In IsoenthalpyProcess, enthalpy are the same from inlet to outlet. So another state still needed. \n\nConnectors:\n\nin: Inlet of process\nout: Outlet of process\n\nArguments:\n\ninter_state: Another state need to be determined. There are 7 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\n\"Q_0\": Giving saturated liquid(0 is value of the state, automatically passed into ODESystem)\n\"Q_1\": Giving saturated vapor(1 is value of the state, automatically passed into ODESystem)\nfluid: The fluid passing throught the component, default: \"Water\"\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.IsothermalProcess-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.IsothermalProcess","text":"IsothermalProcess(; name, inter_state, fluid)\n\n\nComponent: IsothermalProcess\n\nThe Temperature is constant during the process. \n\nOnce the two states in a node are determined, the remaining 3 states can be obtained from these two known states. In IsothermalProcess, temperature are the same from inlet to outlet. So another state still needed. \n\nConnectors:\n\nin: Inlet of process\nout: Outlet of process\n\nArguments:\n\ninter_state: Another state need to be determined. There are 7 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\n\"Q_0\": Giving saturated liquid(0 is value of the state, automatically passed into ODESystem)\n\"Q_1\": Giving saturated vapor(1 is value of the state, automatically passed into ODESystem)\nfluid: The fluid passing throught the component, default: \"Water\"\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.StreamNode-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.StreamNode","text":"StreamNode(; name)\n\n\nA stream node(inlet or outlet) in a thermodynamic cycle system.  There are five states in a node: pressure, enthalpy, temperature, density, entropy.\n\nStates:\n\np(t): [Pa] The pressure at this node\nh(t): [J/kg] The enthalpy at this node\nT(t): [K] The temperature at this node\nρ(t): [kg/m³] The density at this node\ns(t): [J/(kg·K)] The entropy at this node\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.StreamPort-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.StreamPort","text":"StreamPort(; name)\n\n\nComponent with two stream nodes in and out and some variables between in and out.\n\nStates:\n\nΔp(t): [Pa] The pressure at this node\nΔh(t): [J/kg] The enthalpy at this node\nΔT(t): [K] The temperature at this node\nΔρ(t): [kg/m³] The density at this node\nΔs(t): [J/(kg·K)] The entropy at this node\n\nConnectors:\n\nin inlet of components\nout outlet of components\n\n\n\n\n\n","category":"method"},{"location":"API/ThermodynamicCycle/#Ai4EComponentLib.ThermodynamicCycle.ThermalStates-Tuple{}","page":"ThermodynamicCycleAPI","title":"Ai4EComponentLib.ThermodynamicCycle.ThermalStates","text":"ThermalStates(; name, state, value)\n\n\nComponent: ThermalStates\n\nThe ThermalStates passed a fixed value of the state that determined in process. \n\nConnectors:\n\nnode: A node passing value\n\nArguments:\n\nstate: State that determined in process. There are 5 options:\n\"P\": Giving state pressure\n\"H\": Giving state enthalpy \n\"T\": Giving state temperature\n\"D\": Giving state density\n\"S\": Giving state entropy\nvalue: The value of the state\n\n\n\n\n\n","category":"method"},{"location":"tutorials/EconomyGCDModel_A1/#GCDModel_A1","page":"GCDModel_A1","title":"GCDModel_A1","text":"","category":"section"},{"location":"tutorials/EconomyGCDModel_A1/","page":"GCDModel_A1","title":"GCDModel_A1","text":"This page shows the Model A1 of Macroeconomic General Constrained Dynamic models(GCD Models). ","category":"page"},{"location":"tutorials/EconomyGCDModel_A1/","page":"GCDModel_A1","title":"GCDModel_A1","text":"3 steps to use GCDModel_A1 System:","category":"page"},{"location":"tutorials/EconomyGCDModel_A1/","page":"GCDModel_A1","title":"GCDModel_A1","text":"Define components\nConnect components\nSolve","category":"page"},{"location":"tutorials/EconomyGCDModel_A1/#Example:-A-basic-test-for-components","page":"GCDModel_A1","title":"Example: A basic test for components","text":"","category":"section"},{"location":"tutorials/EconomyGCDModel_A1/","page":"GCDModel_A1","title":"GCDModel_A1","text":"This system has only two components–-we only study the interaction between one firm and one household.","category":"page"},{"location":"tutorials/EconomyGCDModel_A1/","page":"GCDModel_A1","title":"GCDModel_A1","text":"# Define components\nusing Ai4EComponentLib\nusing Ai4EComponentLib.EconomyGCDModel_A1\nusing ModelingToolkit, OrdinaryDiffEq\n\n@named firm = Firm(α=0.05, β=0.011, dp̂=0.011, μ₂=0.011, μ₃=0.011, μ₄=0.011, μ₇=0.05, μ₈=0.011, μ₉=0.0, Ŝ=0.011, l̂=0.011)\n@named household = Household(α=0.05, β=0.011, γ=0.25, K₀=0.1, μ₁=0.011, μ₆=0.011, M̂ʰ=0.011)\n\n# Connect components\neqs = [\n    connect(firm.m, household.m)\n]\n\n@named connects = ODESystem(eqs, t)\n@named model = compose(connects, [firm, household])\n\n# Simplify the system and solve\nsys=structural_simplify(model)\n\nprob = ODAEProblem(sys, [], (0.0, 10000.0))\nsol = solve(prob, Tsit5())","category":"page"},{"location":"tutorials/EconomyGCDModel_A1/","page":"GCDModel_A1","title":"GCDModel_A1","text":"Results are shown in the figure below. Actually initial values should be selected carefully, on account of the system isn't always converge.","category":"page"},{"location":"tutorials/EconomyGCDModel_A1/","page":"GCDModel_A1","title":"GCDModel_A1","text":"(Image: Fig 1.2)","category":"page"},{"location":"tutorials/HVAC/#HVAC-System","page":"HVAC System","title":"HVAC System","text":"","category":"section"},{"location":"tutorials/HVAC/#Example-1:-A-basic-test-for-components","page":"HVAC System","title":"Example 1: A basic test for components","text":"","category":"section"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"(Image: 图 1)  ","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"This test has 5 kinds of components:","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"Water Chiller\nFanCoil\nPump\nCooling Tower\nSimple Pipe","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"  ","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"using Ai4EComponentLib\nusing Ai4EComponentLib.HVAC\nusing DifferentialEquations, ModelingToolkit\n\n# Define components\n\nD_ch = [22.08252111,-0.008374357,0.605004615,-0.544042021,-2.10E-07,7.04E-05,0.000299955,-0.028824777]\n@named ch1 = WaterChiller_SimplifiedPolynomial(D=D_ch)\nD_pump = [120,-1500,-0.5,0.8,0.8,0.8]\n@named pump1 = Pump(D=D_pump)\n@named pump2 = Pump(D=D_pump)\n\n@named coolingTower1 = CoolingTower(Tw=26, ΔTct=5)\n\nD_fan = [1, 1.2, 1.2]\n@named fancoil1 = FanCoil(D=D_fan, Qf0=2500)\n@named pipe1 = SimplePipe(R=100)\n@named pipe2 = SimplePipe(R=100)\n@named pipe3 = SimplePipe(R=100)\n@named pipe4 = SimplePipe(R=100)\n\n# Connect components\neqs = [\n    connect(ch1.coolerIn, pipe1.outlet),\n    connect(ch1.coolerOut, pipe2.inlet),\n    connect(ch1.chilledIn, pipe3.outlet),\n    connect(ch1.chilledOut, pipe4.inlet),\n    connect(pipe2.outlet, coolingTower1.inlet),\n    connect(coolingTower1.outlet, pump1.inlet),\n    connect(pipe1.inlet, pump1.outlet),\n    connect(fancoil1.inlet, pipe4.outlet),\n    connect(fancoil1.outlet, pump2.inlet),\n    connect(pump2.outlet, pipe3.inlet),\n    pump2.inlet.p ~ 0,\n    pump1.inlet.p ~ 0,\n    pump1.n ~ 2000,\n    pump2.n ~ 2000,\n    ch1.Tei ~ 7\n]\n\n@named connects = ODESystem(eqs, t)\n@named model = compose(connects, ch1, pipe1, pipe2, pipe3, pipe4, pump1, pump2, fancoil1, coolingTower1)\n\nsys = structural_simplify(model)\nprob = ODEProblem(sys, [], (0.0, 0.0))\nsol = solve(prob)","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"sol[ch1.P]","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"sol[ch1.Tei]","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"sol[ch1.Teo]","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"sol[ch1.Tci]","category":"page"},{"location":"tutorials/HVAC/","page":"HVAC System","title":"HVAC System","text":"sol[ch1.Tco]","category":"page"},{"location":"API/Electrochemistry/#ElectrochemistryAPI","page":"ElectrochemistryAPI","title":"ElectrochemistryAPI","text":"","category":"section"},{"location":"API/Electrochemistry/","page":"ElectrochemistryAPI","title":"ElectrochemistryAPI","text":"CurrentModule = Ai4EComponentLib.Electrochemistry","category":"page"},{"location":"API/Electrochemistry/","page":"ElectrochemistryAPI","title":"ElectrochemistryAPI","text":"Pages = [\"Electrochemistry.md\"]","category":"page"},{"location":"API/Electrochemistry/#Index","page":"ElectrochemistryAPI","title":"Index","text":"","category":"section"},{"location":"API/Electrochemistry/","page":"ElectrochemistryAPI","title":"ElectrochemistryAPI","text":"Pages = [\"Electrochemistry.md\"]","category":"page"},{"location":"API/Electrochemistry/#Electrochemistry-Components","page":"ElectrochemistryAPI","title":"Electrochemistry Components","text":"","category":"section"},{"location":"API/Electrochemistry/","page":"ElectrochemistryAPI","title":"ElectrochemistryAPI","text":"Modules = [Electrochemistry]","category":"page"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Capacitor-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Capacitor","text":"Capacitor(; name, C, v_start)\n\n\nCreates an ideal capacitor.\n\nStates:\n\nv(t): [V] The voltage across the capacitor, given by D(v) ~ p.i / C\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nParameters:\n\nC: [F] Capacitance\nv_start: [V] Initial voltage of capacitor\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Conductor-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Conductor","text":"Conductor(; name, G)\n\n\nCreates an ideal conductor.\n\nStates:\n\nSee OnePort\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nParameters:\n\nG: [S] Conductance\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Constant-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Constant","text":"Constant(; name, U)\n\n\nGenerate constant signal.\n\nParameters:\n\nU: Constant output value\n\nConnectors:\n\nu\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Current_source-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Current_source","text":"Current_source(; name)\n\n\nActs as an ideal current source with no internal resistance.\n\nStates:\n\nSee OnePort\n\nConnectors:\n\np Positive pin\nn Negative pin\nu RealInput Input for the current control signal, i.e. `I ~ p.i\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.DC2DC-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.DC2DC","text":"DC2DC(; name, n, output_type, value)\n\n\nComponent: DC2DC\n\nDC2DC is a device that converts electrical energy of one voltage value into electrical energy of another voltage value in a direct current circuit.\n\nParameters:\n\nn: efficiency of conversion\noutput_type: type of \"boost\" includes voltage or current or none\nvalue: the value of outport\n\nConnectors:\n\nin.p Positive pin of the solar panel\nin.n Negative pin of the solar panel\nout.p Positive pin of the battery\nout.n Negative pin of the battery\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Ground-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Ground","text":"Ground(; name)\n\n\nGround node with the potential of zero and connector g. Every circuit must have one ground node.\n\nFrom ModelingToolkitStandardLibrary.jl\n\nConnectors:\n\ng\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Inductor-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Inductor","text":"Inductor(; name, L, i_start)\n\n\nCreates an ideal Inductor.\n\nStates:\n\nSee OnePort\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nParameters:\n\nL: [H] Inductance\ni_start: [A] Initial current through inductor\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Lithium_ion_batteries-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Lithium_ion_batteries","text":"Lithium_ion_batteries(\n;\n    name,\n    R_0,\n    R_s,\n    R_f,\n    R_sd,\n    C_s,\n    C_f,\n    C_b,\n    SOC2OC\n)\n\n\nComponent: lithiumionbatteries with 8 Paramenters\n\nStates:\n\nv_b: [V] Load voltage\ni_b: [A] Load current\nv_s: [V] Voltage through the short transient RC\nv_f: [V] Voltage through the long transient RC\nv_soc: [V] Voltage representing SOC(0~1)\nv_oc: [V] Open circuit voltage\n\nParamenters:\n\nR_0: Series resistor\nR_s: Short transient resistor\nR_f: Long transient resistor\nR_sd: Self-discharge resistor\nC_s: Short transient capacity\nC_f: Long transient capacity\nC_b: Usable capacity\nSOC2OC: The fitting function of vsoc and voc\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nReference: M. Chen, G.A. Rincon-Mora, Accurate electrical battery model capable of predicting runtime and i-v performance, IEEE Trans.      Energy Convers. 21 (2) (2006) 504–511, https://doi.org/10.1109/TEC.2006.874229.\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.MPPT_Controller-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.MPPT_Controller","text":"MPPT_Controller(; name, Sampling_time)\n\n\nComponent: MPPT_controller\n\nThe MPPT controller can detect the generating voltage of the solar panel in real time, and track the maximum voltage current value (VI), so that the system can charge the battery at the maximum power output. \n\nParameters:\n\nSampling_time: Voltage sampling time\n\nConnectors:\n\nin.p Positive pin of the solar panel\nin.n Negative pin of the solar panel\nout.p Positive pin of the battery\nout.n Negative pin of the battery\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.OnePort-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.OnePort","text":"OnePort(; name, v_start, i_start)\n\n\nComponent with two electrical pins p and n and current i flows from p to n.\n\nFrom ModelingToolkitStandardLibrary.jl\n\nStates:\n\nv(t): [V] The voltage across component p.v - n.v\ni(t): [A] The current passing through positive pin\n\nParameters:\n\nv_start: [V] Initial voltage across the component\ni_start: [A] Initial current through the component\n\nConnectors:\n\np Positive pin\nn Negative pin\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.OnePort_key-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.OnePort_key","text":"OnePort_key(; name, v_start, i_start)\n\n\nComponent with two electrical pins p and n and current i flows from p to n.\n\nThe component does exactly the same thing as the \"OnePort\"  but its variables can not be simplified in the function \"structural_simplify\"\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.PEMElectrolyzer-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.PEMElectrolyzer","text":"PEMElectrolyzer(; name, τ, I_0, n, u_0, R_sol)\n\n\nComponent: PEMElectrolyzer(Proton Exchange Membranes Electrolyzer)\n\nI-U in Electrolyzer:\n\nU_cell=U_0-tau times sinh left(fracII_0(T)right)+I times R_textsol(T)\n\nMolar Yield of Hydrogen and Oxygen, Molar consumption of water:\n\nbeginaligned\ndotn_H_2 O =fracn_c I_e l2 cdot F \ndotn_H_2 =fracn_c I_e l2 cdot F cdot eta_f \ndotn_O_2 =fracn_c I_e l2 cdot F cdot eta_f\nendaligned\n\nMass yield of hydrogen[1]:\n\nfracmathrmd^2 dotmmathrmd t^2=-2 zeta cdot omega_n fracmathrmd dotmmathrmd t-omega_n ^2 dotm+omega_n ^2 M_H_2 n_H_2\n\nStates:\n\nv(t): [V] Voltage across the Electrolyzer\ni(t): [A] Current through the Electrolyzer\nn_H_2(t): [mol/s] Molar Yield of Hydrogen\nη_f(t): Faraday efficiency, here η_f = 1\nm_H_2(t): [g/s] Mass yield of hydrogen\n∂_m_H_2: Derivative of hydrogen mass yield\n\nParameters:\n\nτ: Tafel slope\nI_0: Exchange Current Density\nn: Number of electrolyzers in series\nu_0: Equilibrium potential\nR_sol: Solution resistance\n\nInside Variables:\n\nωₙ: Natural frequency of Hydrogen production [1]\nζ: Damping ratio of Hydrogen production [1]\nmolarMassH2: [g/mol] Molar mass of hydrogen\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nReference:\n\n[1]Espinosa-López M, Darras C, Poggi P, et al. Modelling and experimental validation of a 46 kw pem high pressure water electrolyzer[J]. Renewable energy, 2018, 119:160-173.\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.PhotovoltaicCell-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.PhotovoltaicCell","text":"PhotovoltaicCell(; name, I_ph, I_0, a, R_s, R_sh)\n\n\nComponent: PhotovoltaicCell with 5 Paramenters\n\nStates:\n\nv(t): [V] Voltage across the Cell\ni(t): [A] Current through the Cell\n\nParamenters:\n\nI_ph: Photocurrent\nI_0: Reverse saturation current\na: Correction factor\nR_s: Series resistance\nR_sh: Ohmic resistance\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nReference: De Soto W, Klein S A, Beckman W A. Improvement and validation of a model for photovoltaic array performance[J]. Solar energy, 2006, 80(1):78-88.\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Pin-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Pin","text":"Pin(; name)\n\n\nA pin in an analog circuit.\n\nFrom ModelingToolkitStandardLibrary.jl\n\nStates:\n\nv(t): [V] The voltage at this pin\ni(t): [A] The current passing through this pin\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.RealInput-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.RealInput","text":"RealInput(; name, nin, u_start)\n\n\nConnector with one input signal of type Real.\n\nParameters:\n\nnin=1: Number of inputs\nu_start=0: Initial value for u  \n\nStates:\n\nu: Value of of the connector; if nin=1 this is a scalar\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.RealOutput-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.RealOutput","text":"RealOutput(; name, nout, u_start)\n\n\nConnector with one output signal of type Real.\n\nParameters:\n\nnout=1: Number of inputs\nu_start=0: Initial value for u  \n\nStates:\n\nu: Value of of the connector; if nout=1 this is a scalar\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Resistor-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Resistor","text":"Resistor(; name, R)\n\n\nCreates an ideal Resistor following Ohm's Law.\n\nStates:\n\nSee OnePort\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nParameters:\n\nR: [Ω] Resistance\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Secrete-Tuple{Any}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Secrete","text":"Secrete(data; name, output_type)\n\n\nGenerate secrete signal.\n\nParameters:\n\ndata_name: the name of datafile\noutput_type: the type of sample time includes s or min or hour or day\n\nConnectors:\n\nu\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Super_capacity-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Super_capacity","text":"Super_capacity(; name, R_0, C_0, K_v, R_2, C_2, R_EPR)\n\n\nComponent: Super_capacity with 6 Paramenters\n\nStates:\n\nv_b: [V] Load voltage\ni_b: [A] Load current\nv_0: [V] Voltage through the capacity of the first branch\nv_2: [V] Voltage through the capacity of the second branch\n\nParamenters:\n\nR_0: Series resistor of the first branch\nC_0: Constant capacity of the first branch\nK_v: Proportionality coefficient term\nR_2: Series resistor of the second branch\nC_2: Constant capacity of the second branch\nREPR: selfdischarge resistor\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nReference: R. Faranda, M. Gallina, D.T. Son, A new simplified model of double-layer capacitors, in: Proceedings of the IEEE International Conference on Clean Electrical Power (ICEEP), May 21–23, 2007.https://ieeexplore.ieee.org/abstract/document/4272459/\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.TwoPort-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.TwoPort","text":"TwoPort(; name, v1_start, v2_start, i1_start, i2_start)\n\n\nComponent with four electrical pins p1, n1, p2 and n2 Current i1 flows from p1 to n1 and i2 from p2 to n2.\n\nStates:\n\nv1(t): [V] The voltage across first ports p1.v - n1.v\nv2(t): [V] The voltage across second ports p2.v - n2.v\ni1(t): [A] The current passing through positive pin p1\ni2(t): [A] The current passing through positive pin p2\n\nParameters:\n\nv1_start: [V] Initial voltage across p1 and n1\nv2_start: [V] Initial voltage across p2 and n2\ni2_start: [A] Initial current through p1\ni2_start: [A] Initial current through p2\n\nConnectors:\n\np1 First positive pin\np2 Second positive pin\nn1 First negative pin\nn2 Second Negative pin\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.Voltage_source-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.Voltage_source","text":"Voltage_source(; name)\n\n\nActs as an ideal voltage source with no internal resistance.\n\nStates:\n\nSee OnePort\n\nConnectors:\n\np Positive pin\nn Negative pin\nu RealInput Input for the voltage control signal, i.e. V ~ p.v - n.v\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.charge_controller-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.charge_controller","text":"charge_controller(; name, time, value)\n\n\nComponent: charge_controller\n\nThe charge controller can maintain a constant current and change the current at a specific time.\n\nParameters:\n\ntime: The time the current is changed\nvalue: The value of current after time\n\nConnectors:\n\np Positive pin\nn Negative pin\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.electronic_load-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.electronic_load","text":"electronic_load(; name)\n\n\nSimulated load.\n\nConnectors:\n\nu\n\n\n\n\n\n","category":"method"},{"location":"API/Electrochemistry/#Ai4EComponentLib.Electrochemistry.vari_Resistor-Tuple{}","page":"ElectrochemistryAPI","title":"Ai4EComponentLib.Electrochemistry.vari_Resistor","text":"vari_Resistor(; name, R)\n\n\nCreates an Resistor whose value increases with time.\n\nStates:\n\nSee OnePort\n\nConnectors:\n\np Positive pin\nn Negative pin\n\nParameters:\n\nR: [Ω] Resistance\n\n\n\n\n\n","category":"method"},{"location":"API/HVAC/#HVACAPI","page":"HVACAPI","title":"HVACAPI","text":"","category":"section"},{"location":"API/HVAC/","page":"HVACAPI","title":"HVACAPI","text":"CurrentModule = Ai4EComponentLib.HVAC","category":"page"},{"location":"API/HVAC/","page":"HVACAPI","title":"HVACAPI","text":"Pages = [\"HVAC.md\"]","category":"page"},{"location":"API/HVAC/#Index","page":"HVACAPI","title":"Index","text":"","category":"section"},{"location":"API/HVAC/","page":"HVACAPI","title":"HVACAPI","text":"Pages = [\"HVAC.md\"]","category":"page"},{"location":"API/HVAC/#HVAC-Components","page":"HVACAPI","title":"HVAC Components","text":"","category":"section"},{"location":"API/HVAC/","page":"HVACAPI","title":"HVACAPI","text":"Modules = [HVAC]","category":"page"},{"location":"API/HVAC/#Ai4EComponentLib.HVAC.CoolingTower-Tuple{}","page":"HVACAPI","title":"Ai4EComponentLib.HVAC.CoolingTower","text":"CoolingTower(; name, Tw, ΔTct)\n\n\nComponent: CoolingTower\n\nStates:\n\nqc(t): [kg/s] Cooling water mass flow\nTci(t): [K] Water supply temperature of cooling water\nTco(t): [K] Return water temperature\nΔT(t): [K] Temperature difference between supply and return water\n\nParameters:\n\nTw: [K] Water temperature\nΔTct: [K] Temperature difference between water and air\n\nEquations:\n\nqc ~ inlet.qm: [kg/s] Cooling water mass flow\nTci ~ outlet.T: [K] Water supply temperature of cooling water\nTco ~ inlet.T: [K] Return water temperature\nTci ~ Tw + ΔTct: [K] Water temperature\nΔT ~ Tco - Tci: [K] Temperature difference between supply and return water\ninlet.qm + outlet.qm ~ 0: [kg/s] Mass balance\ninlet.p ~ outlet.p: [Pa] Pressure balance\n\nArguments:\n\nConnectors:\n\ninlet: Inlet of cooling tower\noutlet: Outlet of cooling tower\n\n\n\n\n\n","category":"method"},{"location":"API/HVAC/#Ai4EComponentLib.HVAC.FanCoil-Tuple{}","page":"HVACAPI","title":"Ai4EComponentLib.HVAC.FanCoil","text":"FanCoil(; name, D, Qf0, Tai0, Twi0, Tai, cp)\n\n\nComponent: FanCoil\n\nStates:\n\nQf(t): [W] Actual heat transfer\nTwi(t): [K] Actual inlet water temperature\nTwo(t): [K] Actual outlet water temperature\n\nArguments:\n\nD: [Vector{Float64}] Coefficient of fan coil\nQf0: [W] Rated heat transfer\nTai0: [K] Rated inlet air temperature\nTwi0: [K] Rated inlet water temperature\nTai: [K] Inlet air temperature\ncp: [J/(kg·K)] Specific heat of water\n\nConnectors:\n\ninlet: Inlet of fan coil\noutlet: Outlet of fan coil\n\n\n\n\n\n","category":"method"},{"location":"API/HVAC/#Ai4EComponentLib.HVAC.FlowPort-Tuple{}","page":"HVACAPI","title":"Ai4EComponentLib.HVAC.FlowPort","text":"FlowPort(; name, T0)\n\n\nA pipe port(inlet or outlet) in an pipe network.\n\nStates:\n\np(t): [Pa] The pressure at this port\nq(t): [m³/s] The volume flow passing through this port\nT(t): [K] The temperature at this port\n\n\n\n\n\n","category":"method"},{"location":"API/HVAC/#Ai4EComponentLib.HVAC.Pump-Tuple{}","page":"HVACAPI","title":"Ai4EComponentLib.HVAC.Pump","text":"Pump(; name, D, n0, ρ, g)\n\n\nComponent: CentrifugalPump\n\nStates:\n\nn(t): [rpm] Actual speed of pump\nqv(t): [m³/s] Actual volume flow rate\nH(t): [m] Actual head\nη(t): [-] Actual efficiency\nP(t): [W] Actual power\n\nParameters:\n\nD: [m] Diameter of pump\nn0: [rpm] Rated speed of pump\nρ: [kg/m³] Density of liquid\ng: [m/s²] Gravitational acceleration\n\nArguments:\n\nname: Name of the component\nD: [m] Diameter of pump\nn0: [rpm] Rated speed of pump\nρ: [kg/m³] Density of liquid\ng: [m/s²] Gravitational acceleration\n\nConnectors:\n\ninlet: Inlet of pump\noutlet: Outlet of pump\n\n\n\n\n\n","category":"method"},{"location":"API/HVAC/#Ai4EComponentLib.HVAC.SimplePipe-Tuple{}","page":"HVACAPI","title":"Ai4EComponentLib.HVAC.SimplePipe","text":"SimplePipe(; name, R, T)\n\n\nComponent: SimplePipe(pipe with fixed friction factor f)\n\nStates:\n\nParameters:\n\nR: [Pa·s/m³] Friction factor\n\nArguments:\n\nConnectors:\n\ninlet: Inlet of pipe\noutlet: Outlet of pipe\n\n\n\n\n\n","category":"method"},{"location":"API/HVAC/#Ai4EComponentLib.HVAC.source-Tuple{}","page":"HVACAPI","title":"Ai4EComponentLib.HVAC.source","text":"source(; name, qm, p, t0)\n\n\nComponent: Source\n\nStates:\n\n\n\n\n\n","category":"method"},{"location":"#Ai4EComponentLib.jl","page":"Home","title":"Ai4EComponentLib.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ai4EComponentLib.jl is a Component library based on the ModelingToolkit acasual modeling system.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Import Ai4EComponentLib.jl in the standard way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(\"Ai4EComponentLib\")","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If Ai4EComponentLib is useful, please cite the this paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{yang2022ai4ecomponentlib,\n  title={Ai4EComponentLib.jl: A Component-base Model Library in Julia},\n  author={Yuebao Yang, Jingyi Yang, Mingtao Li},\n  journal={arXiv preprint arXiv:2208.11352},\n  year={2022},\n  primaryClass={cs.SE}\n}","category":"page"},{"location":"#Tutorials","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = map(file -> joinpath(\"tutorials\", file), readdir(\"tutorials\"))","category":"page"},{"location":"#Libraries","page":"Home","title":"Libraries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = map(file -> joinpath(\"API\", file), readdir(\"API\"))","category":"page"},{"location":"API/AirPipeSim/#AirPipeSimAPI","page":"AirPipeSimAPI","title":"AirPipeSimAPI","text":"","category":"section"},{"location":"API/AirPipeSim/","page":"AirPipeSimAPI","title":"AirPipeSimAPI","text":"CurrentModule = Ai4EComponentLib.AirPipeSim","category":"page"},{"location":"API/AirPipeSim/","page":"AirPipeSimAPI","title":"AirPipeSimAPI","text":"Pages = [\"AirPipeSim.md\"]","category":"page"},{"location":"API/AirPipeSim/#Index","page":"AirPipeSimAPI","title":"Index","text":"","category":"section"},{"location":"API/AirPipeSim/","page":"AirPipeSimAPI","title":"AirPipeSimAPI","text":"Pages = [\"AirPipeSim.md\"]","category":"page"},{"location":"API/AirPipeSim/#AirPipeSim-Components","page":"AirPipeSimAPI","title":"AirPipeSim Components","text":"","category":"section"},{"location":"API/AirPipeSim/","page":"AirPipeSimAPI","title":"AirPipeSimAPI","text":"Modules = [AirPipeSim]","category":"page"},{"location":"API/AirPipeSim/#Ai4EComponentLib.AirPipeSim.AirSimplePipe-Tuple{}","page":"AirPipeSimAPI","title":"Ai4EComponentLib.AirPipeSim.AirSimplePipe","text":"AirSimplePipe(; name, R, T)\n\n\nComponent: a single pipe or a pipe network with only one inlet and one outlet in steady state.\n\nAssumptions\n\nThe density or pressure of the air doesn't change too fast.\nTemperature of the pipe (pipe network) doesn't change. Default to 300K.\nIdeal gas law is avliable.\n\nFunction of this component:\n\np_in-p_out=Rq_mq_m\n\nParameters:\n\nR: [kg^{-1}⋅m^{-1}] Resistance coefficient of a pipe (or pipe network)\nT: [K] Approximate temperature of the gas inside pipe.\n\nConnectors:\n\nin: Inlet of tank\nout: Outlet of tank\n\n\n\n\n\n","category":"method"},{"location":"API/AirPipeSim/#Ai4EComponentLib.AirPipeSim.AirStorageTank-Tuple{}","page":"AirPipeSimAPI","title":"Ai4EComponentLib.AirPipeSim.AirStorageTank","text":"AirStorageTank(; name, V, T, p0)\n\n\nComponent: an air storage tank\n\nAssumptions\n\nIgnore the pressure drop between inlet and outlet. The pressure everywhere inside tank equal to the inlet and outlet.\nTemperature of the tank doesn't change. Default to 300K.\nIdeal gas law is avliable.\n\nFunction of this component:\n\nfracmathrmdpmathrmdt=fracR_gTVleft (q_min+q_minright)\n\nParameters:\n\nR_g: [J⋅kg^{-1}⋅K^{-1}] Ideal gas constant. For air is 287.11, which is unchangeable in this component.\nV: [m^3] Volume of the tank.\nT: [K] Temperature of the gas inside the tank.\n\nConnectors:\n\nin: Inlet of tank\nout: Outlet of tank\n\nArguments:\n\np_0: [Pa] Initial value of tank pressure.\n\n\n\n\n\n","category":"method"},{"location":"API/AirPipeSim/#Ai4EComponentLib.AirPipeSim.FlowPort-Tuple{}","page":"AirPipeSimAPI","title":"Ai4EComponentLib.AirPipeSim.FlowPort","text":"FlowPort(; name, T)\n\n\nA pipe port(inlet or outlet) in an pipe network.\n\nStates:\n\np(t): [Pa] The pressure at this port\nqm(t): [kg/s] The mass flow rate passing through this port\n\nParameters:\n\nT: [K] The temperature of port. It'll be used in future develop.\n\n\n\n\n\n","category":"method"},{"location":"API/AirPipeSim/#Ai4EComponentLib.AirPipeSim.FlowSource-Tuple{}","page":"AirPipeSimAPI","title":"Ai4EComponentLib.AirPipeSim.FlowSource","text":"FlowSource(; name, qm, T)\n\n\nComponent: a source (or sink) with constant mass flow rate\n\nParameters:\n\nqm: [kg⋅s^{-1}] The mass flow rate this source supply or this sink absorb.\nT: [K] Temperature of the gas flow out (or into) this source (or sink). Default to 300K.\n\nConnectors:\n\nport: a FlowPort type subcomponent.\n\n\n\n\n\n","category":"method"},{"location":"API/AirPipeSim/#Ai4EComponentLib.AirPipeSim.PressureSource-Tuple{}","page":"AirPipeSimAPI","title":"Ai4EComponentLib.AirPipeSim.PressureSource","text":"PressureSource(; name, p, T)\n\n\nComponent: a source (or sink) with constant pressure\n\nParameters:\n\np: [Pa] The pressure this source (or sink) supply.\nT: [K] Temperature of the gas flow out (or into) this source (or sink). Default to 300K.\n\nConnectors:\n\nport: a FlowPort type subcomponent.\n\n\n\n\n\n","category":"method"},{"location":"API/AirPipeSim/#Ai4EComponentLib.AirPipeSim.TransitionPipe-Tuple{}","page":"AirPipeSimAPI","title":"Ai4EComponentLib.AirPipeSim.TransitionPipe","text":"TransitionPipe(\n;\n    name,\n    λ1,\n    λ2,\n    λ3,\n    n,\n    f,\n    D,\n    L,\n    T,\n    pins,\n    pouts\n)\n\n\nComponent: a single straight pipe in transition state.\n\nAssumptions\n\nIgnore the difference in parameters on the same cross section. The flow inside pipe can be treated an 1-D flow.\nTemperature of the pipe (pipe network) doesn't change. Default to 300K.\nIdeal gas law is avliable.\n\nFunction of this component:\n\nfracpartial ppartial t=-fracR_g TA fracpartial q_mpartial x \nfracpartial q_mpartial t=left(fracR_g TA fracq_m^2p^2-Aright) fracpartial ppartial x-2 fracR_g TA fracq_mp fracpartial q_mpartial x-fracf2 D fracR_g TA fracq_mleftq_mrightp\n\nParameters:\n\nParameters:\n\nR_g: [J⋅kg^{-1}⋅K^{-1}] Ideal gas constant. For air is 287.11, which is unchangeable in this component.\nT: [K] Temperature of the air.\nf: Friction factor\nD: [m] Diameter of the pipe\nL: [m] Length of the pipe\n\nConnectors:\n\nin: Inlet of tank\nout: Outlet of tank\n\nArguments:\n\nλ1, λ2 and λ3: Three coefficient for other use like parameter estimation. They have no influence on simulation, and they are default to 1.\nn: The number of control volumes that the pipe be divided into equally.\npins and pouts: [Pa] The initial pressure at the inlet and outlet of pipe. Simulation will start from the steady state of pipe at the boundary pins and pouts.\n\n\n\n\n\n","category":"method"},{"location":"API/EconomyGCDModel_A1/#EconomyGCDModel_A1API","page":"EconomyGCDModel_A1API","title":"EconomyGCDModel_A1API","text":"","category":"section"},{"location":"API/EconomyGCDModel_A1/","page":"EconomyGCDModel_A1API","title":"EconomyGCDModel_A1API","text":"CurrentModule = Ai4EComponentLib.EconomyGCDModel_A1","category":"page"},{"location":"API/EconomyGCDModel_A1/","page":"EconomyGCDModel_A1API","title":"EconomyGCDModel_A1API","text":"Pages = [\"EconomyGCDModel_A1.md\"]","category":"page"},{"location":"API/EconomyGCDModel_A1/#Index","page":"EconomyGCDModel_A1API","title":"Index","text":"","category":"section"},{"location":"API/EconomyGCDModel_A1/","page":"EconomyGCDModel_A1API","title":"EconomyGCDModel_A1API","text":"Pages = [\"EconomyGCDModel_A1.md\"]","category":"page"},{"location":"API/EconomyGCDModel_A1/#EconomyGCDModel_A1-Components","page":"EconomyGCDModel_A1API","title":"EconomyGCDModel_A1 Components","text":"","category":"section"},{"location":"API/EconomyGCDModel_A1/","page":"EconomyGCDModel_A1API","title":"EconomyGCDModel_A1API","text":"Modules = [EconomyGCDModel_A1]","category":"page"},{"location":"API/EconomyGCDModel_A1/#Ai4EComponentLib.EconomyGCDModel_A1.Capitalflow-Tuple{}","page":"EconomyGCDModel_A1API","title":"Ai4EComponentLib.EconomyGCDModel_A1.Capitalflow","text":"The port through which money flows.\n\nStates:\n\np(t): Price of good\nw(t): Wage(per hour)\nl(t): Labor\nc(t): Consumption\n𝛌₁(t),𝛌₂(t),𝛌₃(t):Parameters that result from the constraint force for the change in consumption and varies over time.\n\nParameters:\n\nα,β: Parameters in a simple Cobb-Douglas production function.\nK₀: Initial value of Capital.\n\n\n\n\n\n","category":"method"},{"location":"API/EconomyGCDModel_A1/#Ai4EComponentLib.EconomyGCDModel_A1.Firm-Tuple{}","page":"EconomyGCDModel_A1API","title":"Ai4EComponentLib.EconomyGCDModel_A1.Firm","text":"Component: an agent–-firm.\n\nFunction of this component:\n\nDP=hatdp(K)\nfirmmptimes firmmC-firmmwtimes firmmL-firmmM=0\nbeta(firmmL)^alpha(K)^1-alpha-firmmC-(K)-(S)-DP=0\n(K)=mu^H_Kpbeta(1-alpha)(firmmL)^alpha(K)^-alpha-lambda_3\n(firmmM)=-lambda_2\n(S)=mu^F_S(hatS-S)-lambda_3 \n(firmmp)=mu^F_pbeta(K)^1-alpha(firmmL)^alpha-lambda_1(firmmC)+lambda_2(firmmC)\n(firmmw)=mu^F_w(firmmL)+lambda_1(firmmL)-lambda_2(firmmL)\n(firmmL)=mu^H_L(hatL-firmmL)+mu^F_L(alphabeta(K)^1-alpha(firmmL)^alpha-1-firmmw)\n+lambda_1(firmmw)-lambda_2(firmmw)+lambda_3alphabeta(firmmL)^alpha-1(K)^1-alpha\n\nParameters:\n\nα,β: Parameters in a simple Cobb-Douglas production function.\ndp̂: depreciation.\nμ₂: The parameter of Capital.\nμ₃: The parameter of Labor and Household.\nμ₄: The parameter of Labor and Firm.\nμ₇: The parameter of Price.\nμ₈: The parameter of storage.\nμ₉: The parameter of Wage.\nŜ: The planned inventory of storage.\nl̂: The wish of working time.\n\nConnectors:\n\nm: money.\n\n\n\n\n\n","category":"method"},{"location":"API/EconomyGCDModel_A1/#Ai4EComponentLib.EconomyGCDModel_A1.Household-Tuple{}","page":"EconomyGCDModel_A1API","title":"Ai4EComponentLib.EconomyGCDModel_A1.Household","text":"Component: an agent–-Household.\n\nFunction of this component:\n\nhouseholdmwtimes householdmL-householdmptimes householdmC-householdmM\n(householdmM)=2mu^H_M^H(hatM^H-householdmM)-lambda_2\n(householdmC)=mu^H_Cgamma (householdmC)^gamma-1-lambda_1(householdmp)+lambda_2(householdmp)-lambda_3\n\nStates:\n\nMʰ(t): Money stock household.\nmʰ(t): Derivative of Mʰ(t).\n\nParameters:\n\nα,β: Parameters in a simple Cobb-Douglas production function.\ndp̂: depreciation.\nμ₁: The parameter of Consumption.\nμ₆: The parameter of money stock household.\nK₀: Initial value of Capital.\nM̂ʰ: The amount of cash that Households aim to keep.\nγ: The parameter of Consumption and Household.\n\nConnectors:\n\nm: money.\n\n\n\n\n\n","category":"method"}]
}
